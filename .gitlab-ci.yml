workflow:
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        VERSION: "$CI_COMMIT_TAG"

    - if: $CI_COMMIT_BRANCH == "dev"
      variables:
        VERSION: "$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA"
        DOCS_URL: https://edge.docs.comentario.app

stages:
  - build
  - package
  - deploy
  - release

variables:
  CI_TOOLS_VERSION: "v18"
  # Namespace to deploy Kubernetes objects into
  NAMESPACE: ys-comentario
  DOCS_URL: https://docs.comentario.app
  GORELEASER_VERSION: "1.21.2"

build:
  stage: build
  image: registry.gitlab.com/comentario/comentario-ci-tools/builder:$CI_TOOLS_VERSION
  artifacts:
    when: always
    name: comentario
    expire_in: 1 days  # Only keep the last batch
    paths:
      - build/
      - cypress/screenshots
      - cypress/videos
      - tmp/logs
  variables:
    # We want to store downloaded packages under the project dir, so we can cache them
    GOPATH: $CI_PROJECT_DIR/.go
  services:
    - name: postgres:15-alpine
      variables:
        POSTGRES_DB: comentario
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
    # The test-site service. Its URL (mentioned in CYPRESS_TEST_SITE_URL) must match the host (alias)
    - name: registry.gitlab.com/comentario/comentario-ci-tools/test-site:$CI_TOOLS_VERSION
      alias: comentario-test-site
  cache:
    key:
      files:
        # Backend
        - go.mod
        # Frontend
        - yarn.lock
    paths:
      # Backend
      - .go/pkg/mod/
      # Frontend
      - .yarn-cache/
  before_script:
    # Create the required dirs
    - mkdir -p .go tmp/logs
  script:
    #-------------------------------------------------------------------------------------------------------------------
    # Build the app
    #-------------------------------------------------------------------------------------------------------------------
    # Backend: generate code
    - go generate

    # Backend: fetch the dependencies explicitly (not exactly necessary, but it's easier to spot problems if we do)
    - go mod download

    # Backend: make sure there are no formatting issues
    - test -z "$(go fmt ./...)"

    # Backend: run unit tests
    - go test -v ./...

    # Build the backend, e2e plugin and relay
    - go build -v -o "./build/comentario" -ldflags "-X main.version=$(git describe --tags) -X main.date=$(date --iso-8601=seconds)"
    - go build -buildmode=plugin -o "./build/comentario-e2e.so" "./e2e/plugin/"
    - go build -v -o "./build/comentario-relay" "./e2e/relay/"

    # Frontend: fetch the dependencies
    - yarn install --frozen-lockfile --no-progress --cache-folder .yarn-cache

    # Frontend: build
    - yarn run build:prod

    # Frontend: lint
    - yarn run lint

    # Frontend: unit tests
    - yarn run test:ci

    # Copy static assets
    - cp -r db/ templates/ build/

    # Start the backend
    - ./build/comentario -vv
        --e2e
        --port=8080
        --static-path=build/frontend
        --db-migration-path=build/db
        --template-path=build/templates
        --secrets=resources/k8s/secrets.yaml
        --base-docs-url="${DOCS_URL}"
        --home-content-url="${DOCS_URL}/en/embed/front-page/"
        &> ./tmp/logs/comentario-server.log &

    # Wait for the backend server to come online
    - i=0
    - while ((i++ < 30)); do
    -    curl --max-time 2 -vs http://localhost:8080/en/ >/dev/null && break
    -    sleep 1
    - done

    # Start the relay to pass localhost:8000 requests through to comentario-test-site:80
    - ./build/comentario-relay 
        -listen 127.0.0.1:8000
        -target http://comentario-test-site
        &> ./tmp/logs/comentario-relay.log &

    # Wait for the relay to come online
    - i=0
    - while ((i++ < 30)); do
    -    curl --max-time 2 -vs http://localhost:8000/comments/ >/dev/null && break
    -    sleep 1
    - done

    # Run the e2e tests
    - npx cypress install
    - npx cypress run

    # Rebuild the backend in the production mode. Disable CGO to statically link the executable so that we can run that
    # in Alpine
    - CGO_ENABLED=0 go build -a -v -o "./build/comentario" -ldflags "-w -s -X main.version=$(git describe --tags) -X main.date=$(date --iso-8601=seconds)"

package:
  stage: package
  image: docker
  services:
    - docker:dind
  dependencies:
    - build
  variables:
    IMG_TAG_CURRENT: $CI_REGISTRY_IMAGE:$VERSION
    IMG_TAG_LATEST:  $CI_REGISTRY_IMAGE:latest
  artifacts:
    paths:
      - dist/
  script:
    # Login to the Container Registry
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

    # Remove the e2e plugin (it isn't supposed to be in the image)
    - rm build/comentario-e2e.so

    # Build and push the image
    - docker build -t "$IMG_TAG_CURRENT" .
    - docker push "$IMG_TAG_CURRENT"

    # For dev, also push it as 'latest'
    - |
      if [[ $CI_COMMIT_BRANCH == "dev" ]]; then
          docker tag "$IMG_TAG_CURRENT" "$IMG_TAG_LATEST"
          docker push "$IMG_TAG_LATEST"
      fi

    # Build source/binary packages (tag only)
    - |
      if [[ -n "$CI_COMMIT_TAG" ]]; then
          # Install goreleaser
          curl https://github.com/goreleaser/goreleaser/releases/download/v"$GORELEASER_VERSION"/goreleaser_"$GORELEASER_VERSION"_amd64.deb \
              -o /tmp/goreleaser.deb
          dpkg -i /tmp/goreleaser.deb
          rm -f /tmp/goreleaser.deb

          # Create packages
          goreleaser release --clean --skip=publish
      fi

# Deploy the dev branch to edge.comentario.app
deploy-dev:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  image: alpine/k8s:1.25.6
  environment:
    name: edge.comentario.app
  script:
    # Use the Kubernetes context from GitLab agent
    - kubectl config use-context comentario/comentario-ci-tools:ys-comentario

    # Perform chart installation/upgrade (edge.comentario.app), waiting for it to complete (up to two minutes)
    - helm upgrade
        --namespace $NAMESPACE
        --install
        --set "clusterIssuer=letsencrypt-prod"
        --set "image.repository=$CI_REGISTRY_IMAGE"
        --set "image.tag=$VERSION"
        --set "comentario.baseDocsUrl=https://edge.docs.comentario.app/"
        --set "comentario.homeContentURL=https://edge.docs.comentario.app/en/embed/front-page/"
        --set "comentario.emailFrom=noreply@yktoo.com"
        --set "comentario.secretName=comentario-edge-secrets"
        --set "ingress.host=edge.comentario.app"
        --wait
        --timeout 2m
        comentario-edge
        resources/helm/comentario

    # Deploy the recreate demo DB cronjob
    - helm upgrade
        --namespace $NAMESPACE
        --install
        --set "database.secretName=comentario-edge-secrets"
        --wait
        --timeout 1m
        comentario-demo-recreate-db
        resources/helm/demo-recreate-db

    # Trigger the job right away
    - kubectl create job
        --namespace $NAMESPACE
        --from=cronjob/comentario-demo-recreate-db-cronjob
        comentario-demo-recreate-db-cronjob-$(date +%s)

# Deploy any tag, except those containing "rc" (release candidate), to production
deploy-tag:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /rc/i
  image: alpine/k8s:1.25.6
  environment:
    name: comentario.app
  script:
    # Use the Kubernetes context from GitLab agent
    - kubectl config use-context comentario/comentario-ci-tools:ys-comentario

    # Perform chart installation/upgrade (comentario.app), waiting for it to complete (up to two minutes)
    - helm upgrade
        --namespace $NAMESPACE
        --install
        --set "clusterIssuer=letsencrypt-prod"
        --set "image.repository=$CI_REGISTRY_IMAGE"
        --set "image.tag=$VERSION"
        --set "comentario.emailFrom=noreply@yktoo.com"
        --set "comentario.secretName=comentario-app-secrets"
        --set "ingress.host=comentario.app"
        --wait
        --timeout 2m
        comentario-app
        resources/helm/comentario

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  dependencies:
    - package
  before_script:
    # Install curl
    - apk add --no-cache curl
  script:
    # Strip the 'v' prefix from the version number
    - ver_num="${VERSION#v}"
    - package_registry_url="$CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/comentario/$ver_num"
    - basename="comentario_v$VERSION_linux_amd64"

    # Upload the packages
    - assets=""
    - |
      for f in "$basename.deb" "$basename.rpm" "$basename.tar.gz" "checksums.txt" "metadata.json"; do
          echo "Uploading artifact $f to $package_registry_url"
          curl -fs --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "dist/$f" "$package_registry_url/$f"
      
          # Accumulate assets JSON
          [[ -n "$assets" ]] && assets="$assets,"
          assets="$assets{\"name\":\"$f\",\"url\":\"$package_registry_url/$f\"}"
      done

    # Extract the release text from CHANGELOG.md
    - awk "/^##\s*$VERSION/{flag=1; next} /^##/{flag=0} flag" CHANGELOG.md > release-text
    - |
      if [ ! -s release-text ]; then
        echo "Failed to extract release text for $VERSION from CHANGELOG.md"
        exit 1
      fi

    # Create a release
    - echo "Creating release $CI_COMMIT_TAG"
    - release-cli create --name "$CI_COMMIT_TAG" --tag-name "$CI_COMMIT_TAG" --description release-text --assets-link "[$assets]"
