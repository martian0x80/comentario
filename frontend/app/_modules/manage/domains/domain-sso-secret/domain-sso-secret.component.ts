import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';
import { faCopy, faExclamationTriangle, faRotate } from '@fortawesome/free-solid-svg-icons';
import { DomainMeta, DomainSelectorService } from '../../_services/domain-selector.service';
import { ApiGeneralService } from '../../../../../generated-api';
import { Paths } from '../../../../_utils/consts';
import { ProcessingStatus } from '../../../../_utils/processing-status';

@UntilDestroy()
@Component({
    selector: 'app-domain-sso-secret',
    templateUrl: './domain-sso-secret.component.html',
})
export class DomainSsoSecretComponent implements OnInit {

    /** Domain/user metadata. */
    domainMeta?: DomainMeta;

    /** SSO secret generated by the API. */
    ssoSecret?: string;

    readonly Paths = Paths;
    readonly generating = new ProcessingStatus();

    // Icons
    readonly faCopy   = faCopy;
    readonly faRotate = faRotate;

    constructor(
        private readonly route: ActivatedRoute,
        private readonly api: ApiGeneralService,
        private readonly domainSelectorSvc: DomainSelectorService,
    ) {
        // Monitor the domain ID param in the route
        this.domainSelectorSvc.monitorRouteParam(this, this.route, 'id');
    }

    ngOnInit(): void {
        // Subscribe to domain changes
        this.domainSelectorSvc.domainMeta
            .pipe(untilDestroyed(this))
            .subscribe(meta => this.domainMeta = meta);
    }

    generateSsoSecret() {
        this.api.domainSsoSecretNew(this.domainMeta!.domain!.id!)
            .pipe(this.generating.processing())
            .subscribe(r => {
                this.ssoSecret = r.ssoSecret;
                this.domainSelectorSvc.reload();
            });
    }

    protected readonly faExclamationTriangle = faExclamationTriangle;
}
