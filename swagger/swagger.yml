info:
  title: Comentario
  version: 1.0.0
consumes:
  - application/json
produces:
  - application/json
schemes:
  - http
swagger: "2.0"
basePath: /api

securityDefinitions:
  # Header authentication for commenters (used by the embed part). Apart from the delivery method, its difference from
  # the userCookie security is that userSessionHeader allows to 'authenticate' as an anonymous user
  userSessionHeader:
    type: apiKey
    in: header
    name: X-User-Session

  # Cookie authentication for users (used by the frontend part). Uses the apiKey type for the lack of a proper
  # cookie-based authentication in Swagger 2
  userCookie:
    type: apiKey
    in: header
    name: Cookie

  # Token authentication for certain endpoints, called externally, such as password reset or email confirmation
  token:
    type: oauth2
    flow: accessCode
    authorizationUrl: http://dummy/
    tokenUrl: http://dummy/
    scopes:
      pwd-reset: reset user's password
      confirm-email: confirm user's email

# Default security is cookie-based user authentication
security:
  - userCookie: []

definitions:

  apiError:
    description: Generic API error object
    type: object
    readOnly: true
    properties:
      id:
        type: string
      message:
        type: string
      details:
        type: string
    x-go-type:
      import:
        package: "gitlab.com/comentario/comentario/internal/api/exmodels"
      type: "Error"

  comment:
    description: Comment residing on a page
    type: object
    readOnly: true
    properties:
      id:
        type: string
        format: uuid
        description: Unique record ID
      parentId:
        type: string
        format: uuid
        description: Parent record ID, null if it's a root comment on the page
      pageId:
        type: string
        format: uuid
        description: ID of the page
      markdown:
        type: string
        description: Comment text in markdown
      html:
        type: string
        description: Rendered comment text in HTML
      score:
        type: integer
        description: Comment score
        x-omitempty: false
      isSticky:
        type: boolean
        description: Whether the comment is sticky (attached to the top of page)
        x-omitempty: false
      isApproved:
        type: boolean
        description: Whether the comment is approved and can be seen by everyone
        x-omitempty: false
      isPending:
        type: boolean
        description: Whether the comment is pending approval
        x-omitempty: false
      isDeleted:
        type: boolean
        description: Whether the comment is marked as deleted
        x-omitempty: false
      createdTime:
        type: string
        format: date-time
        description: When the comment was created
      moderatedTime:
        type: string
        format: date-time
        description: When a moderation action has last been applied to the comment
      deletedTime:
        type: string
        format: date-time
        description: When the comment was deleted
      userCreated:
        type: string
        format: uuid
        description: ID of the user who created the comment
      userModerated:
        type: string
        format: uuid
        description: ID of the user who last moderated the comment
      userDeleted:
        type: string
        format: uuid
        description: ID of the user who deleted the comment
      pendingReason:
        type: string
        description: Reason for the pending state of the comment
      direction:
        type: integer
        format: int8
        description: Vote direction for the current user
      url:
        type: string
        format: uri
        description: Full URL of the comment

  commenter:
    description: Stripped-down, read-only version of the user who authored a comment
    type: object
    readOnly: true
    properties:
      id:
        type: string
        format: uuid
        description: Unique user ID
      email:
        type: string
        format: email
        description: Email address of the user
      name:
        type: string
        description: Full name of the user
      websiteUrl:
        type: string
        format: uri
        description: URL of the user's website
      hasAvatar:
        type: boolean
        description: Whether the user has an avatar image
        x-omitempty: false
      isModerator:
        type: boolean
        description: Whether the user is a moderator on this specific domain
        x-omitempty: false
      isCommenter:
        type: boolean
        description: Whether the user is a commenter on this specific domain (false means the user is read-only)
        x-omitempty: false
      colourIndex:
        type: integer
        format: uint8
        description: Colour hash, number based on the user's ID
        x-omitempty: false
      createdTime:
        type: string
        format: date-time
        description: When the commenter user was created (visible to domain moderator+ only)
      federatedIdP:
        $ref: "#/definitions/federatedIdpId"
        description: Optional ID of the federated identity provider used for authentication. If empty, it's a local user (visible to domain moderator+ only)
      federatedSso:
        type: boolean
        description: Whether the user is authenticated via SSO (visible to domain moderator+ only)

  commentSort:
    description: Comment sorting. 1st letter defines the property, 2nd letter the direction
    type: string
    minLength: 2
    maxLength: 2
    enum:
      - ta # By timestamp, ascending
      - td # By timestamp, descending
      - sa # By score, ascending
      - sd # By score, descending
    x-isnullable: false

  domain:
    description: Registered domain
    type: object
    required:
      - host
      - isHttps
    properties:
      id:
        type: string
        format: uuid
        readOnly: true
        description: Unique domain ID
      name:
        type: string
        maxLength: 255
        description: Domain display name
      host:
        $ref: "#/definitions/host"
        description: Domain host
        x-isnullable: false
      createdTime:
        type: string
        format: date-time
        readOnly: true
        description: When the domain was created
      isHttps:
        type: boolean
        description: Whether HTTPS should be used to resolve URLs on this domain (as opposed to HTTP)
        x-omitempty: false
      isReadonly:
        type: boolean
        readOnly: true
        description: Whether the domain is readonly (no new comments are allowed)
        x-omitempty: false
        x-isnullable: false
      authAnonymous:
        type: boolean
        description: Whether anonymous comments are allowed
        x-omitempty: false
      authLocal:
        type: boolean
        description: Whether local authentication is allowed
        x-omitempty: false
      authSso:
        type: boolean
        description: Whether SSO authentication is allowed
        x-omitempty: false
      ssoUrl:
        type: string
        description: SSO provider URL
        x-omitempty: false
      ssoNonInteractive:
        type: boolean
        description: Whether to use a non-interactive SSO login
        x-omitempty: false
      ssoSecretConfigured:
        type: boolean
        readOnly: true
        description: Whether SSO secret is configured for this domain
        x-omitempty: false
        x-isnullable: false
      modAnonymous:
        type: boolean
        description: Whether all anonymous comments are to be approved by a moderator
        x-omitempty: false
      modAuthenticated:
        type: boolean
        description: Whether all non-anonymous comments are to be approved by a moderator
        x-omitempty: false
      modNumComments:
        type: integer
        format: uint
        description: Number of first comments by user on this domain that require a moderator approval
        x-omitempty: false
      modUserAgeDays:
        type: integer
        format: uint
        description: Number of first days since user has registered on this domain to require a moderator approval on their comments
        x-omitempty: false
      modLinks:
        type: boolean
        description: Whether all comments containing a link are to be approved by a moderator
        x-omitempty: false
      modImages:
        type: boolean
        description: Whether all comments containing an image are to be approved by a moderator
        x-omitempty: false
      modNotifyPolicy:
        $ref: "#/definitions/domainModNotifyPolicy"
        description: Moderator notification policy for domain
      defaultSort:
        $ref: "#/definitions/commentSort"
        description: Default comment sorting for domain
      countComments:
        type: integer
        readOnly: true
        description: Total number of comments. -1 means the value is not provided
        x-omitempty: false
      countViews:
        type: integer
        readOnly: true
        description: Total number of views. -1 means the value is not provided
        x-omitempty: false
      rootUrl:
        type: string
        format: uri
        description: Root URL of the domain, without trailing slash
        readOnly: true

  domainExtension:
    description: Domain extension info
    type: object
    required:
      - id
    properties:
      id:
        $ref: "#/definitions/domainExtensionId"
        description: Extension ID
        example: akismet
      name:
        type: string
        readOnly: true
        description: Extension display name
        example: Akismet
      config:
        type: string
        description: Extension configuration, linebreak-separated list of key=value pairs
      requiresKey:
        type: boolean
        readOnly: true
        description: Whether the extension requires an API key at domain level
        x-omitempty: false

  domainExtensionId:
    description: Domain extension ID
    type: string
    enum:
      - akismet
      - perspective
      - apiLayer.spamChecker
    x-isnullable: false

  domainModNotifyPolicy:
    description: Moderator notification policy for domain
    type: string
    enum:
      - none
      - pending
      - all
    x-isnullable: false

  domainPage:
    description: Page on a specific domain
    type: object
    readOnly: true
    properties:
      id:
        type: string
        format: uuid
        description: Unique record ID
      domainId:
        type: string
        format: uuid
        description: ID of the domain
      path:
        $ref: "#/definitions/path"
        description: Page path
      title:
        type: string
        description: Optional page title
      isReadonly:
        type: boolean
        description: Whether the page is readonly (no new comments are allowed)
        x-omitempty: false
      createdTime:
        type: string
        format: date-time
        description: When the record was created
      countComments:
        type: integer
        description: Total number of comments. -1 means the value is not provided
        x-omitempty: false
      countViews:
        type: integer
        description: Total number of views. -1 means the value is not provided
        x-omitempty: false

  domainUser:
    description: Registered user on a domain
    type: object
    readOnly: true
    properties:
      domainId:
        type: string
        format: uuid
        description: ID of the domain
      userId:
        type: string
        format: uuid
        description: ID of the user
      isOwner:
        type: boolean
        description: Whether the user is an owner of the domain (assumes is_moderator and is_commenter)
        x-omitempty: false
      isModerator:
        type: boolean
        description: Whether the user is a moderator of the domain (assumes is_commenter)
        x-omitempty: false
      isCommenter:
        type: boolean
        description: Whether the user is a commenter of the domain (if false, the user is readonly on the domain)
        x-omitempty: false
      notifyReplies:
        type: boolean
        description: Whether the user is to be notified about replies to their comments
        x-omitempty: false
      notifyModerator:
        type: boolean
        description: Whether the user is to receive moderator notifications (only when is_moderator is true)
        x-omitempty: false
      createdTime:
        type: string
        format: date-time
        description: When the domain user was created

  federatedIdentityProvider:
    description: Federated identity provider info
    type: object
    required:
      - id
      - name
      - icon
    properties:
      id:
        $ref: "#/definitions/federatedIdpId"
        description: Provider ID
        example: github
      name:
        type: string
        description: Provider display name
        x-isnullable: false
        example: GitHub
      icon:
        type: string
        description: Provider icon name
        x-isnullable: false
        example: github

  federatedIdpId:
    description: Federated identity provider ID
    type: string
    enum:
      - facebook
      - github
      - gitlab
      - google
      - linkedin
      - twitter
    x-isnullable: false

  host:
    description: DNS hostname, with an optional port number
    example: example.com:8080
    type: string
    minLength: 1
    maxLength: 259  # 253 (max length of a DNS name) + ":" + 5 (port number 1..65535)
    pattern: "[-.a-z0-9]{1,253}(:[0-9]{1-5})?"
    x-isnullable: false

  importResult:
    description: Comment import result
    type: object
    readOnly: true
    properties:
      usersTotal:
        type: integer
        format: uint
        description: Total number of users
        x-omitempty: false
      usersAdded:
        type: integer
        format: uint
        description: Number of added users
        x-omitempty: false
      domainUsersAdded:
        type: integer
        format: uint
        description: Number of added domain users
        x-omitempty: false
      pagesTotal:
        type: integer
        format: uint
        description: Total number of domain pages
        x-omitempty: false
      pagesAdded:
        type: integer
        format: uint
        description: Number of added domain pages
        x-omitempty: false
      commentsTotal:
        type: integer
        format: uint
        description: Total number of comments processed
        x-omitempty: false
      commentsImported:
        type: integer
        format: uint
        description: Number of imported comments
        x-omitempty: false
      commentsSkipped:
        type: integer
        format: uint
        description: Number of skipped comments
        x-omitempty: false
      commentsNonDeleted:
        type: integer
        format: uint
        description: Number of non-deleted imported comments
        x-omitempty: false
      error:
        type: string
        description: Any error message occurred during the import

  instanceDynamicConfigItem:
    description: Dynamic instance configuration item
    type: object
    required:
      - key
      - value
    properties:
      key:
        type: string
        description: Item key
      value:
        type: string
        description: Item value
      description:
        type: string
        readOnly: true
        description: Item description
      datatype:
        $ref: "#/definitions/instanceDynamicConfigItemDatatype"
        readOnly: true
        description: Item datatype
      updatedTime:
        type: string
        format: date-time
        readOnly: true
        description: Timestamp when the item was last updated in the database
      userUpdated:
        type: string
        format: uuid
        readOnly: true
        description: Reference to the user who last updated the item in the database
      defaultValue:
        type: string
        readOnly: true
        description: Item's default value

  instanceDynamicConfigItemDatatype:
    description: Dynamic instance configuration item datatype
    type: string
    enum:
      - boolean

  instanceStaticConfig:
    description: Static instance configuration
    type: object
    readOnly: true
    required:
      - baseUrl
      - baseDocsUrl
      - version
      - buildDate
      - defaultLangId
      - resultPageSize
    properties:
      baseUrl:
        type: string
        x-isnullable: false
        description: Base Comentario URL
      baseDocsUrl:
        type: string
        x-isnullable: false
        description: Base Documentation URL
      version:
        type: string
        x-isnullable: false
        description: Comentario version
      buildDate:
        type: string
        format: date-time
        x-isnullable: false
        description: Server build date
      defaultLangId:
        type: string
        x-isnullable: false
        description: Default interface language ID
      homeContentUrl:
        type: string
        format: uri
        description: >
          URL of a HTML page to display on the homepage. If not provided, the homepage will redirect to login (for 
          unauthenticated user) or dashboard (for authenticated)
      federatedIdps:
        type: array
        items:
          $ref: "#/definitions/federatedIdentityProvider"
        description: Configured federated identity providers
      resultPageSize:
        type: integer
        format: uint
        x-isnullable: false
        description: Max number of database rows returned per page
      uiLanguages:
        type: array
        items:
          $ref: "#/definitions/uiLanguage"
        description: Available UI languages

  pageInfo:
    description: Information about a page displaying comments
    type: object
    readOnly: true
    required:
      - domainId
      - domainName
      - pageId
      - isDomainReadonly
      - isPageReadonly
      - authAnonymous
      - authLocal
      - authSso
      - ssoUrl
      - ssoNonInteractive
      - defaultSort
    properties:
      domainId:
        type: string
        format: uuid
        description: Domain ID
        x-isnullable: false
      domainName:
        type: string
        description: Domain display name
        x-isnullable: false
      pageId:
        type: string
        format: uuid
        description: Page ID
        x-isnullable: false
      isDomainReadonly:
        type: boolean
        description: Whether the domain is readonly (no new comments are allowed)
        x-isnullable: false
        x-omitempty: false
      isPageReadonly:
        type: boolean
        description: Whether the page is readonly (no new comments are allowed)
        x-isnullable: false
        x-omitempty: false
      authAnonymous:
        type: boolean
        description: Whether anonymous comments are allowed
        x-isnullable: false
        x-omitempty: false
      authLocal:
        type: boolean
        description: Whether local authentication is allowed
        x-isnullable: false
        x-omitempty: false
      authSso:
        type: boolean
        description: Whether SSO authentication is allowed
        x-isnullable: false
        x-omitempty: false
      ssoUrl:
        type: string
        description: SSO provider URL
        x-isnullable: false
      ssoNonInteractive:
        type: boolean
        description: Whether to use a non-interactive SSO login
        x-isnullable: false
        x-omitempty: false
      defaultSort:
        $ref: "#/definitions/commentSort"
        description: Default comment sorting for domain
      idps:
        type: array
        items:
          $ref: "#/definitions/federatedIdentityProvider"
        description: List of enabled federated identity providers

  path:
    description: Path on a certain host
    example: /foo
    type: string
    minLength: 1
    maxLength: 2075 # 2083 (max URL length) - 8 (http://a, the shortest possible prefix)
    pattern: "/.*"
    x-isnullable: false

  principal:
    description: Authenticated or anonymous user
    type: object
    readOnly: true
    properties:
      id:
        type: string
        format: uuid
        description: Unique user ID
      email:
        type: string
        format: email
        description: Email address of the user
      name:
        type: string
        description: Full name of the user
      langId:
        type: string
        description: User's interface language ID
      websiteUrl:
        type: string
        format: uri
        description: Optional website URL of the user
      hasAvatar:
        type: boolean
        description: Whether the user has an avatar image
        x-omitempty: false
      isLocal:
        type: boolean
        description: Whether the user is authenticated locally (as opposed to via a federated/SSO identity provider)
        x-omitempty: false
      isConfirmed:
        type: boolean
        description: Whether the user has confirmed their email address
        x-omitempty: false
      isSuperuser:
        type: boolean
        description: Whether the user is a "super user" (instance admin)
        x-omitempty: false
      isOwner:
        type: boolean
        description: Whether the user is an owner of the domain (only for commenter auth)
        x-omitempty: false
      isModerator:
        type: boolean
        description: Whether the user is a moderator on this specific domain (only for commenter auth)
        x-omitempty: false
      isCommenter:
        type: boolean
        description: Whether the user is a commenter on this specific domain (false means the user is read-only; only for commenter auth)
        x-omitempty: false
      notifyReplies:
        type: boolean
        description: Whether the user is to be notified about replies to their comments (only for commenter auth)
        x-omitempty: false
      notifyModerator:
        type: boolean
        description: Whether the user is to receive moderator notifications (only for commenter auth)
        x-omitempty: false
      colourIndex:
        type: integer
        format: uint8
        description: Colour hash, number based on the user's ID
        x-omitempty: false

  statsDailyCounts:
    description: Daily statistical data, one value per day
    type: array
    readOnly: true
    items:
      type: integer
      format: uint

  statsTotals:
    description: Total statistical figures for Comentario dashboard
    type: object
    readOnly: true
    required:
      - countUsersTotal
      - countUsersBanned
      - countUsersNonBanned
      - countDomainsOwned
      - countDomainsModerated
      - countDomainsCommenter
      - countDomainsReadonly
      - countPagesModerated
      - countDomainUsers
      - countComments
      - countCommenters
    properties:
      countUsersTotal:
        type: integer
        format: int64
        description: Total number of users the current user can manage (superuser only)
        x-omitempty: false
        x-isnullable: false
      countUsersBanned:
        type: integer
        format: int64
        description: Number of banned users the current user can manage (superuser only)
        x-omitempty: false
        x-isnullable: false
      countUsersNonBanned:
        type: integer
        format: int64
        description: Number of non-banned users the current user can manage (superuser only)
        x-omitempty: false
        x-isnullable: false
      countDomainsOwned:
        type: integer
        format: int64
        description: Number of domains the current user owns
        x-omitempty: false
        x-isnullable: false
      countDomainsModerated:
        type: integer
        format: int64
        description: Number of domains the current user is a moderator on
        x-omitempty: false
        x-isnullable: false
      countDomainsCommenter:
        type: integer
        format: int64
        description: Number of domains the current user is a commenter on
        x-omitempty: false
        x-isnullable: false
      countDomainsReadonly:
        type: integer
        format: int64
        description: Number of domains the current user has the readonly status on
        x-omitempty: false
        x-isnullable: false
      countPagesModerated:
        type: integer
        format: int64
        description: Number of pages the current user can moderate
        x-omitempty: false
        x-isnullable: false
      countDomainUsers:
        type: integer
        format: int64
        description: Number of domain users the current user can manage
        x-omitempty: false
        x-isnullable: false
      countComments:
        type: integer
        format: int64
        description: Number of comments the current user can moderate
        x-omitempty: false
        x-isnullable: false
      countCommenters:
        type: integer
        format: int64
        description: Number of authors of comment the current user can moderate
        x-omitempty: false
        x-isnullable: false

  uiLanguage:
    description: UI language
    type: object
    readOnly: true
    properties:
      id:
        type: string
        description: Language ID, such as 'en' or 'zh_CN'
      nameEnglish:
        type: string
        description: Language name in English
      nameNative:
        type: string
        description: Language name in the language self

  user:
    description: User
    type: object
    properties:
      id:
        type: string
        format: uuid
        readOnly: true
        description: Unique user ID
      email:
        type: string
        format: email
        description: Unique user email
      name:
        type: string
        description: User's full name
      langId:
        type: string
        description: User's interface language ID
      password:
        type: string
        description: Password (write-only). If empty, the password remains unchanged
      systemAccount:
        type: boolean
        readOnly: true
        description: Whether the user is a system account (cannot sign in)
        x-omitempty: false
        x-isnullable: false
      isSuperuser:
        type: boolean
        description: Whether the user is a "superuser" (instance admin)
        x-omitempty: false
        x-isnullable: false
      confirmed:
        type: boolean
        description: Whether the user's email has been confirmed
        x-omitempty: false
        x-isnullable: false
      confirmedTime:
        type: string
        format: date-time
        readOnly: true
        description: When the user's email has been confirmed
      createdTime:
        type: string
        format: date-time
        readOnly: true
        description: When the user was created
      userCreated:
        type: string
        format: uuid
        readOnly: true
        description: Reference to the user who created this one. null if the used signed up themselves
      signupIP:
        type: string
        readOnly: true
        description: IP address the user signed up or was created from
      signupCountry:
        type: string
        readOnly: true
        description: 2-letter country code matching the SignupIP
      signupHost:
        type: string
        readOnly: true
        description: Host the user signed up on (only for commenter signup, empty for UI signup)
      banned:
        type: boolean
        readOnly: true
        description: Whether the user is banned
        x-omitempty: false
        x-isnullable: false
      bannedTime:
        type: string
        format: date-time
        readOnly: true
        description: When the user was banned
      userBanned:
        type: string
        format: uuid
        readOnly: true
        description: Reference to the user who banned this one
      remarks:
        type: string
        description: Optional remarks for the user
      federatedIdP:
        $ref: "#/definitions/federatedIdpId"
        readOnly: true
        description: Optional ID of the federated identity provider used for authentication. If empty, it's a local user
      federatedSso:
        type: boolean
        readOnly: true
        description: Whether the user is authenticated via SSO
        x-omitempty: false
        x-isnullable: false
      federatedId:
        type: string
        readOnly: true
        description: User ID as reported by the federated identity provider (only when federatedIdP/federatedSso is set)
      hasAvatar:
        type: boolean
        readOnly: true
        description: Optional user's avatar image
        x-omitempty: false
        x-isnullable: false
      websiteUrl:
        type: string
        format: uri
        description: Optional user's website URL
      colourIndex:
        type: integer
        format: uint8
        readOnly: true
        description: Colour hash, number based on the user's ID
        x-omitempty: false

parameters:

  federatedIdpId:
    in: path
    name: provider
    required: true
    description: Federated identity provider ID
    type: string
    enum:
      - facebook
      - github
      - gitlab
      - google
      - linkedin
      - twitter
      - sso  # SSO is a special case of federated authentication, which requires additional configuration for a specific domain

  pathDailyMetric:
    name: metric
    in: path
    required: true
    description: Metric for returning daily stats on
    type: string
    enum:
      - comments
      - domainUsers
      - domainPages
      - views

  pathImportSource:
    name: source
    in: path
    required: true
    description: Source of the data to import into a domain
    type: string
    enum:
      - comentario
      - disqus

  pathHost:
    name: host
    in: path
    required: true
    description: Domain host path parameter
    type: string
    minLength: 1
    maxLength: 259
    pattern: "[-.a-z0-9]{1,253}(:[0-9]{1-5})?"

  pathUuid:
    in: path
    name: uuid
    required: true
    description: UUID in the path
    type: string
    format: uuid
    x-isnullable: false

  queryDomainId:
    in: query
    name: domain
    required: true
    description: Domain UUID in the query
    type: string
    format: uuid

  queryFilter:
    name: filter
    in: query
    required: false
    description: Optional substring to filter the result by
    type: string
    maxLength: 100

  queryOptionalDomain:
    name: domain
    in: query
    required: false
    description: Optional domain query parameter
    type: string
    format: uuid

  queryOptionalHost:
    name: host
    in: query
    required: false
    description: Optional host query parameter
    type: string
    minLength: 1
    maxLength: 259
    pattern: "[-.a-z0-9]{1,253}(:[0-9]{1-5})?"

  querySortDesc:
    name: sortDesc
    in: query
    required: false
    description: 'Optional sort direction: ascending (false) or descending (true)'
    type: boolean

  queryPageNumber:
    name: page
    in: query
    required: false
    description: Optional page number to return results for
    type: integer
    format: uint
    minimum: 1
    default: 1

  queryStatsDays:
    in: query
    name: days
    required: false
    type: integer
    format: uint
    minimum: 1
    maximum: 30
    default: 30
    description: Number of days to get statistics for

  queryToken:
    in: query
    name: token
    required: true
    description: ID consisting of 64 hex digits, in the query parameter
    type: string
    minLength: 64
    maxLength: 64
    pattern: '[0-9a-f]{64}'

  queryUserId:
    in: query
    name: user
    required: true
    description: User UUID in the query
    type: string
    format: uuid

  queryUserSecret:
    in: query
    name: secret
    required: true
    description: User's secret token in the query
    type: string
    format: uuid

responses:
  # 400
  BadRequest:
    description: Invalid input data has been passed
    schema:
      $ref: "#/definitions/apiError"

  # 401
  Unauthorised:
    description: User is not authorised
    schema:
      $ref: "#/definitions/apiError"

  # 403
  Forbidden:
    description: The specified operation is not allowed
    schema:
      $ref: "#/definitions/apiError"

  # 404
  NotFound:
    description: The specified resource was not found
    schema:
      $ref: "#/definitions/apiError"

  # 422
  UnprocessableEntity:
    description: Invalid input data has been passed
    schema:
      $ref: "#/definitions/apiError"

  # 500
  InternalError:
    description: Server experiences an internal error
    schema:
      $ref: "#/definitions/apiError"

  # 502
  BasGateway:
    description: Data relay or dependent service failure
    schema:
      $ref: "#/definitions/apiError"

  # 307
  OAuthRedirect:
    description: Redirecting to a federated identity provider
    headers:
      Location:
        type: string

  # 401
  OAuthFailure:
    description: Authentication failed
    schema:
      type: string

paths:
  /_:
    options:
      operationId: Generic
      summary: Fake endpoint to provide generic errors
      tags:
        - ApiGeneral
      responses:
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorised"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"
        500:
          $ref: "#/responses/InternalError"
        502:
          $ref: "#/responses/BasGateway"

  #---------------------------------------------------------------------------------------------------------------------
  # Mail
  #---------------------------------------------------------------------------------------------------------------------

  /mail/unsubscribe:
    get:
      operationId: MailUnsubscribe
      summary: Unsubscribe a user from email notifications
      tags:
        - ApiGeneral
      security: []
      parameters:
        - $ref: "#/parameters/queryDomainId"
        - $ref: "#/parameters/queryUserId"
        - $ref: "#/parameters/queryUserSecret"
        - in: query
          name: kind
          required: true
          description: Kind of notifications to unsubscribe the user from
          type: string
          enum:
            - reply
            - moderator
      responses:
        307:
          description: The user has been unsubscribed from notifications, redirecting to the UI
          headers:
            Location:
              type: string

  #---------------------------------------------------------------------------------------------------------------------
  # Auth
  #---------------------------------------------------------------------------------------------------------------------

  /auth/confirm:
    get:
      operationId: AuthConfirm
      summary: Confirm the user's email using the provided token
      tags:
        - ApiGeneral
      security:
        - token: [confirm-email]
      responses:
        307:
          description: Email has been confirmed, redirecting to the signup URL, if any, otherwise to login
          headers:
            Location:
              type: string

  /auth/login:
    post:
      operationId: AuthLogin
      summary: Sign in as an existing user
      tags:
        - ApiGeneral
      security: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                minLength: 1
                maxLength: 63
      responses:
        200:
          description: Login successful
          schema:
            $ref: "#/definitions/principal"

  /auth/login/token:
    post:
      operationId: AuthLoginTokenNew
      summary: Request a new anonymous token with the "login" scope, which is to be used for subsequent federated authentication
      tags:
        - ApiGeneral
      security: []
      responses:
        200:
          description: New anonymous token is returned
          schema:
            type: object
            properties:
              token:
                type: string
                description: New anonymous token

    put:
      operationId: AuthLoginTokenRedeem
      summary: Log in using the provided, no longer anonymous, token
      tags:
        - ApiGeneral
      security:
        - token: [login]
      responses:
        200:
          description: Login successful
          schema:
            $ref: "#/definitions/principal"

  /auth/logout:
    post:
      operationId: AuthLogout
      summary: Log the current user out
      tags:
        - ApiGeneral
      responses:
        204:
          description: User has been logged out

  /auth/profile:
    post:
      operationId: AuthSignup
      summary: Sign up as a new owner
      tags:
        - ApiGeneral
      security: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - name
              - email
              - password
            properties:
              name:
                type: string
                minLength: 1
                maxLength: 63
              email:
                type: string
                format: email
              password:
                type: string
                minLength: 1
                maxLength: 63
      responses:
        200:
          description: Owner has signed up successfully, returning a principal
          schema:
            $ref: "#/definitions/principal"

    delete:
      operationId: AuthDeleteProfile
      summary: Delete the account of the current user
      tags:
        - ApiGeneral
      responses:
        204:
          description: Owner's account has been deleted

  /auth/password-reset:
    post:
      operationId: AuthPwdResetSendEmail
      summary: Request a password reset for a local user by sending them an email
      tags:
        - ApiGeneral
      security: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                format: email
      responses:
        204:
          description: Reset email has been sent, if the email address is known

    put:
      operationId: AuthPwdResetChange
      summary: Give a local user a new password
      tags:
        - ApiGeneral
      security:
        - token: [pwd-reset]
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - password
            properties:
              password:
                type: string
                description: New password to set
                minLength: 1
                maxLength: 63
      responses:
        204:
          description: Password has been reset

  # OAuth

  /oauth/{provider}:
    get:
      operationId: AuthOauthInit
      summary: Initiate signing in via federated authentication using an anonymous token
      tags:
        - ApiGeneral
      security: []
      produces:
        - text/html # For an error response only, otherwise a redirect is issued
      parameters:
        - $ref: "#/parameters/federatedIdpId"
        - $ref: "#/parameters/queryOptionalHost"
        - $ref: "#/parameters/queryToken"
      responses:
        307:
          $ref: "#/responses/OAuthRedirect"
        401:
          $ref: "#/responses/OAuthFailure"

  /oauth/{provider}/callback:
    get:
      operationId: AuthOauthCallback
      summary: Endpoint that gets called back by the federated authentication provider
      tags:
        - ApiGeneral
      security: []
      produces:
        - text/html
      parameters:
        - $ref: "#/parameters/federatedIdpId"
      responses:
        200:
          description: User has successfully signed in
        401:
          $ref: "#/responses/OAuthFailure"

  #---------------------------------------------------------------------------------------------------------------------
  # Current user
  #---------------------------------------------------------------------------------------------------------------------

  /user:
    get:
      operationId: CurUserGet
      summary: Fetch the currently authenticated user, if any
      tags:
        - ApiGeneral
      security: []
      responses:
        200:
          description: User is authenticated, principal info returned
          schema:
            $ref: "#/definitions/principal"
        204:
          description: User is not authenticated

    put:
      operationId: CurUserUpdate
      summary: Update profile details of the current user
      tags:
        - ApiGeneral
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                minLength: 1
                maxLength: 63
                description: New full name of the user
              curPassword:
                type: string
                minLength: 1
                maxLength: 63
                description: Current password of the user. Required if newPassword is given, otherwise ignored
              newPassword:
                type: string
                minLength: 1
                maxLength: 63
                description: New password to set for the user. Optional, if not provided, the password remains unchanged
              websiteUrl:
                type: string
                format: uri
                description: Optional website URL of the user
      responses:
        204:
          description: User profile has been updated

  /user/avatar:
    post:
      operationId: CurUserSetAvatar
      summary: Upload an avatar for the current user
      tags:
        - ApiGeneral
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: data
          type: file
          required: false
          maxLength: 1048576 # 1 MB
          description: Avatar image file, if omitted, the current user's avatar will be removed
      responses:
        204:
          description: Avatar has been set

  #---------------------------------------------------------------------------------------------------------------------
  # Embed API
  #---------------------------------------------------------------------------------------------------------------------

  # Auth

  /embed/auth/login:
    post:
      operationId: EmbedAuthLogin
      summary: Sign a commenter in
      tags:
        - ApiEmbed
      security: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
              - password
              - host
            properties:
              email:
                type: string
                format: email
                description: Commenter's email
              password:
                type: string
                minLength: 1
                description: Commenter's password
              host:
                $ref: "#/definitions/host"
                description: Host the commenter is signing in on
      responses:
        200:
          description: Logged in successfully
          schema:
            type: object
            properties:
              sessionToken:
                type: string
                description: Session token to authenticate subsequent API requests with
              principal:
                $ref: "#/definitions/principal"
                description: Authenticated principal

  /embed/auth/login/token:
    put:
      operationId: EmbedAuthLoginTokenRedeem
      summary: Log in using the provided, no longer anonymous, token
      tags:
        - ApiEmbed
      security:
        - token: [login]
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - host
            properties:
              host:
                $ref: "#/definitions/host"
                description: Host the commenter is signing in on
      responses:
        200:
          description: Logged in successfully
          schema:
            type: object
            properties:
              sessionToken:
                type: string
                description: Session token to authenticate subsequent API requests with
              principal:
                $ref: "#/definitions/principal"
                description: Authenticated principal

  /embed/auth/logout:
    post:
      operationId: EmbedAuthLogout
      summary: Log the currently signed-in commenter out
      tags:
        - ApiEmbed
      security:
        - userSessionHeader: []
      responses:
        204:
          description: Logged out successfully

  /embed/auth/signup:
    post:
      operationId: EmbedAuthSignup
      summary: Sign up as a new commenter
      tags:
        - ApiEmbed
      security: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
              - name
              - password
              - url
            properties:
              email:
                type: string
                format: email
                description: User's email
              name:
                type: string
                minLength: 1
                maxLength: 63
                description: User's full name
              password:
                type: string
                minLength: 1
                maxLength: 63
                description: User's password
              websiteUrl:
                type: string
                format: uri
                description: Optional website URL of the user
              url:
                type: string
                format: uri
                description: URL the user signed up on
      responses:
        200:
          description: Commenter signed up successfully
          schema:
            type: object
            properties:
              isConfirmed:
                type: boolean
                description: Whether the user has been immediately confirmed
                x-omitempty: false
  /embed/auth/user:
    post:
      operationId: EmbedAuthCurUserGet
      summary: Request commenter's sign-in status and, if the commenter's signed in, their details
      tags:
        - ApiEmbed
      security: []
      responses:
        204:
          description: User is not signed in
        200:
          description: User is authenticated, principal info returned
          schema:
            $ref: "#/definitions/principal"

    put:
      operationId: EmbedAuthCurUserUpdate
      summary: Update commenter details
      tags:
        - ApiEmbed
      security:
        - userSessionHeader: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - pageId
            properties:
              pageId:
                type: string
                format: uuid
                description: ID of the page to apply user notification settings on
              notifyReplies:
                type: boolean
                description: Whether the user is to be notified about replies to their comments
              notifyModerator:
                type: boolean
                description: Whether the user is to receive moderator notifications
      responses:
        204:
          description: Commenter details haven been updated

  # Comments

  /embed/comments:
    post:
      operationId: EmbedCommentList
      summary: Get a list of comments and commenters for the given host/path combination
      tags:
        - ApiEmbed
      security:
        - userSessionHeader: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - host
              - path
            properties:
              host:
                $ref: "#/definitions/host"
                description: Host the comments reside on
              path:
                $ref: "#/definitions/path"
                description: Path of the page the comments reside on
      responses:
        200:
          description: Comment and commenter list
          schema:
            type: object
            properties:
              pageInfo:
                description: Page info
                $ref: "#/definitions/pageInfo"
              comments:
                description: Comments on the page
                type: array
                items:
                  $ref: "#/definitions/comment"
              commenters:
                description: Commenters, who authored comments on the page
                type: array
                items:
                  $ref: "#/definitions/commenter"

    put:
      operationId: EmbedCommentNew
      summary: Add a new comment
      tags:
        - ApiEmbed
      security:
        - userSessionHeader: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - host
              - path
              - markdown
            properties:
              host:
                description: Host the page resides on
                $ref: "#/definitions/host"
              path:
                description: Path to the page to create a comment on
                $ref: "#/definitions/path"
              parentId:
                description: Optional ID of the parent comment for the new one. If omitted, a root comment will be added
                type: string
                format: uuid
              markdown:
                description: Comment text in the markdown format
                type: string
                minLength: 1
                maxLength: 4096
                x-isnullable: false
      responses:
        200:
          description: Comment is added
          schema:
            type: object
            properties:
              comment:
                description: Added comment
                $ref: "#/definitions/comment"
              commenter:
                description: Commenter that corresponds to the current user
                $ref: "#/definitions/commenter"

  /embed/comments/counts:
    post:
      operationId: EmbedCommentCount
      summary: Request comment counts for specified paths on given domain
      tags:
        - ApiEmbed
      security: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - host
              - paths
            properties:
              host:
                $ref: "#/definitions/host"
              paths:
                type: array
                items:
                  $ref: "#/definitions/path"
                minItems: 1
                maxItems: 32
      responses:
        200:
          description: Comment counts per path
          schema:
            type: object
            properties:
              commentCounts:
                type: object # map[string]int

  /embed/comments/{uuid}:
    parameters:
      - $ref: "#/parameters/pathUuid"

    delete:
      operationId: EmbedCommentDelete
      summary: Delete specified comment
      tags:
        - ApiEmbed
      security:
        - userSessionHeader: []
      responses:
        204:
          description: Comment has been deleted

    put:
      operationId: EmbedCommentUpdate
      summary: Update specified comment
      tags:
        - ApiEmbed
      security:
        - userSessionHeader: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - markdown
            properties:
              markdown:
                description: Comment text in the markdown format
                type: string
                minLength: 1
                maxLength: 4096
                x-isnullable: false
      responses:
        200:
          description: Comment is updated, the updated comment is returned
          schema:
            type: object
            properties:
              comment:
                description: >
                  Updated comment. NB: Vote direction in the returned comment is always 0
                $ref: "#/definitions/comment"

  /embed/comments/{uuid}/moderate:
    post:
      operationId: EmbedCommentModerate
      summary: Approve or reject the specified comment
      tags:
        - ApiEmbed
      security:
        - userSessionHeader: []
      parameters:
        - $ref: "#/parameters/pathUuid"
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - approve
            properties:
              approve:
                description: Whether to approve the comment
                type: boolean
      responses:
        204:
          description: Comment has been updated

  /embed/comments/{uuid}/sticky:
    post:
      operationId: EmbedCommentSticky
      summary: Set the stickiness for specified comment
      tags:
        - ApiEmbed
      security:
        - userSessionHeader: []
      parameters:
        - $ref: "#/parameters/pathUuid"
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - sticky
            properties:
              sticky:
                type: boolean
                description: New sticky value for the comment
      responses:
        204:
          description: Stickiness has been applied

  /embed/comments/{uuid}/vote:
    post:
      operationId: EmbedCommentVote
      summary: Vote for specified comment
      tags:
        - ApiEmbed
      security:
        - userSessionHeader: []
      parameters:
        - $ref: "#/parameters/pathUuid"
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - direction
            properties:
              direction:
                type: integer
                format: int8
                enum:
                  - -1
                  - 0
                  - 1
                description: Vote direction
      responses:
        200:
          description: Vote has been applied
          schema:
            type: object
            properties:
              score:
                type: integer
                description: The updated comment score
                x-omitempty: false

  /embed/page/{uuid}:
    put:
      operationId: EmbedPageUpdate
      summary: Update specified page's properties
      tags:
        - ApiEmbed
      security:
        - userSessionHeader: []
      parameters:
        - $ref: "#/parameters/pathUuid"
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - isReadonly
            properties:
              isReadonly:
                type: boolean
                description: Whether the page is to be made readonly (no new comments are allowed)

      responses:
        204:
          description: Page properties have been updated

  #---------------------------------------------------------------------------------------------------------------------
  # Dashboard
  #---------------------------------------------------------------------------------------------------------------------

  /dashboard/stats/totals:
    get:
      operationId: DashboardTotals
      summary: Get summary (totals) data for the user
      tags:
        - ApiGeneral
      responses:
        200:
          description: Dashboard data
          schema:
            $ref: "#/definitions/statsTotals"

  /dashboard/stats/daily/{metric}:
    get:
      operationId: DashboardDailyStats
      summary: Get daily statistics for the given metric and the current user and, optionally, specified domain
      tags:
        - ApiGeneral
      parameters:
        - $ref: "#/parameters/pathDailyMetric"
        - $ref: "#/parameters/queryStatsDays"
        - $ref: "#/parameters/queryOptionalDomain"
      responses:
        200:
          description: Daily statistical data
          schema:
            $ref: "#/definitions/statsDailyCounts"

  #---------------------------------------------------------------------------------------------------------------------
  # Domains
  #---------------------------------------------------------------------------------------------------------------------

  /domains:
    get:
      operationId: DomainList
      summary: Get a list of registered domains
      tags:
        - ApiGeneral
      parameters:
        - $ref: "#/parameters/queryFilter"
        - $ref: "#/parameters/queryPageNumber"
        - in: query
          name: sortBy
          type: string
          enum:
            - name
            - host
            - created
            - countComments
            - countViews
          description: Property to sort results by
        - $ref: "#/parameters/querySortDesc"
      responses:
        200:
          description: List of domains
          schema:
            type: object
            properties:
              domains:
                type: array
                items:
                  $ref: "#/definitions/domain"
                description: Domains the current user has (some) rights to
              domainUsers:
                type: array
                items:
                  $ref: "#/definitions/domainUser"
                description: Current user's properties on domains (can be linked to a domain using domainId)

    post:
      operationId: DomainNew
      summary: Register a new domain
      tags:
        - ApiGeneral
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - domain
            properties:
              domain:
                $ref: "#/definitions/domain"
                description: Domain properties
              federatedIdpIds:
                type: array
                items:
                  $ref: "#/definitions/federatedIdpId"
                description: IDs of federated identity providers enabled for the domain
              extensions:
                type: array
                items:
                  $ref: "#/definitions/domainExtension"
                description: List of extensions enabled for the domain, and their configurations
      responses:
        200:
          description: Domain added successfully
          schema:
            $ref: "#/definitions/domain"
            description: The added domain

  /domains/count:
    get:
      operationId: DomainCount
      summary: Get number of domains available to the current user
      tags:
        - ApiGeneral
      parameters:
        - in: query
          name: owner
          type: boolean
          description: >
            Only include domains where the current user is an owner. Ignored if moderator is true because every owner is
            also a moderator
        - in: query
          name: moderator
          type: boolean
          description: Only include domains where the current user is a moderator
      responses:
        200:
          description: Number of domains
          schema:
            type: integer

  /domains/{uuid}:
    parameters:
      - $ref: "#/parameters/pathUuid"

    get:
      operationId: DomainGet
      summary: Get properties of a domain
      tags:
        - ApiGeneral
      responses:
        200:
          description: Domain properties
          schema:
            type: object
            properties:
              domain:
                $ref: "#/definitions/domain"
                description: Domain properties
              domainUser:
                $ref: "#/definitions/domainUser"
                description: Current user's properties on the domain (only when there is one)
              federatedIdpIds:
                type: array
                items:
                  $ref: "#/definitions/federatedIdpId"
                description: IDs of federated identity providers enabled for the domain
              extensions:
                type: array
                items:
                  $ref: "#/definitions/domainExtension"
                description: List of extensions enabled for the domain, and their configurations

    put:
      operationId: DomainUpdate
      summary: Update properties of specified domain
      tags:
        - ApiGeneral
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - domain
            properties:
              domain:
                $ref: "#/definitions/domain"
                description: Domain properties
              federatedIdpIds:
                type: array
                items:
                  $ref: "#/definitions/federatedIdpId"
                description: IDs of federated identity providers enabled for the domain
              extensions:
                type: array
                items:
                  $ref: "#/definitions/domainExtension"
                description: List of extensions enabled for the domain, and their configurations
      responses:
        200:
          description: Domain properties have been updated
          schema:
            $ref: "#/definitions/domain"
            description: The updated domain

    delete:
      operationId: DomainDelete
      summary: Delete a domain
      tags:
        - ApiGeneral
      responses:
        204:
          description: Domain has been deleted

  /domains/{uuid}/clear:
    delete:
      operationId: DomainClear
      summary: Clear all domain's pages/comments/votes
      tags:
        - ApiGeneral
      parameters:
        - $ref: "#/parameters/pathUuid"
      responses:
        204:
          description: Domain has been cleared

  /domains/{uuid}/readonly:
    put:
      operationId: DomainReadonly
      summary: Set the domain's readonly state
      tags:
        - ApiGeneral
      parameters:
        - $ref: "#/parameters/pathUuid"
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - readonly
            properties:
              readonly:
                type: boolean
                description: Readonly status to set
      responses:
        204:
          description: Domain status has been set

  /domains/{uuid}/export:
    get:
      operationId: DomainExport
      summary: Export domain data and download as a gzip-archive file
      tags:
        - ApiGeneral
      produces:
        - application/gzip
      parameters:
        - $ref: "#/parameters/pathUuid"
      responses:
        200:
          description: Export file
          schema:
            type: file
          headers:
            Content-Disposition:
              type: string

  /domains/{uuid}/import/{source}:
    post:
      operationId: DomainImport
      summary: Import comments and commenters into specified domain from exported data, downloaded from certain URL
      tags:
        - ApiGeneral
      consumes:
        - multipart/form-data
      parameters:
        - $ref: "#/parameters/pathUuid"
        - $ref: "#/parameters/pathImportSource"
        - in: formData
          name: data
          type: file
          required: true
          description: Import data file
      responses:
        200:
          description: Import completed successfully
          schema:
            $ref: "#/definitions/importResult"

  /domains/{uuid}/sso/new:
    post:
      operationId: DomainSsoSecretNew
      summary: Generate an SSO secret for specified domain
      tags:
        - ApiGeneral
      parameters:
        - $ref: "#/parameters/pathUuid"
      responses:
        200:
          description: SSO secret has been generated for the domain
          schema:
            type: object
            properties:
              ssoSecret:
                type: string

  #---------------------------------------------------------------------------------------------------------------------
  # Domain pages
  #---------------------------------------------------------------------------------------------------------------------

  /domain-pages:
    get:
      operationId: DomainPageList
      summary: Get a list of pages for a specific domain
      tags:
        - ApiGeneral
      parameters:
        - $ref: "#/parameters/queryDomainId"
        - $ref: "#/parameters/queryFilter"
        - $ref: "#/parameters/queryPageNumber"
        - in: query
          name: sortBy
          type: string
          enum:
            - path
            - title
            - created
            - countComments
            - countViews
          description: Property to sort results by
        - $ref: "#/parameters/querySortDesc"
      responses:
        200:
          description: List of domain pages
          schema:
            type: object
            properties:
              pages:
                type: array
                items:
                  $ref: "#/definitions/domainPage"
                description: List of domain pages

  /domain-pages/{uuid}:
    parameters:
      - $ref: "#/parameters/pathUuid"

    get:
      operationId: DomainPageGet
      summary: Get properties of a domain page
      tags:
        - ApiGeneral
      responses:
        200:
          description: Domain page properties
          schema:
            type: object
            properties:
              page:
                $ref: "#/definitions/domainPage"
                description: Domain page properties

    put:
      operationId: DomainPageUpdate
      summary: Update properties of specified domain page
      tags:
        - ApiGeneral
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - isReadonly
            properties:
              isReadonly:
                type: boolean
                description: Whether the page must be readonly
      responses:
        204:
          description: Domain page properties have been updated

  /domain-pages/{uuid}/title:
    post:
      operationId: DomainPageUpdateTitle
      summary: Update the title of a domain page by inspecting the corresponding URL
      tags:
        - ApiGeneral
      parameters:
        - $ref: "#/parameters/pathUuid"
      responses:
        200:
          description: Domain page title has been fetched and, possibly, updated
          schema:
            type: object
            properties:
              changed:
                type: boolean
                description: Whether the title was changed
                x-omitempty: false

  #---------------------------------------------------------------------------------------------------------------------
  # Comments
  #---------------------------------------------------------------------------------------------------------------------

  /comments:
    get:
      operationId: CommentList
      summary: Get a list of comments and commenters for the given domain and, if specified, page
      tags:
        - ApiGeneral
      parameters:
        - $ref: "#/parameters/queryDomainId"
        - in: query
          name: pageId
          required: false
          description: Optional domain page ID to filter comments by
          type: string
          format: uuid
        - in: query
          name: userId
          required: false
          description: Optional user ID to filter comments by
          type: string
          format: uuid
        - in: query
          name: approved
          type: boolean
          required: false
          description: Whether to include approved comments
        - in: query
          name: pending
          type: boolean
          required: false
          description: Whether to include comments pending moderation
        - in: query
          name: rejected
          type: boolean
          required: false
          description: Whether to include rejected comments
        - in: query
          name: deleted
          type: boolean
          required: false
          description: Whether to include deleted comments
        - $ref: "#/parameters/queryFilter"
        - $ref: "#/parameters/queryPageNumber"
        - in: query
          name: sortBy
          type: string
          enum:
            - created
            - score
          description: Property to sort results by
        - $ref: "#/parameters/querySortDesc"
      responses:
        200:
          description: Comment and commenter list
          schema:
            type: object
            properties:
              comments:
                description: Comments on the page
                type: array
                items:
                  $ref: "#/definitions/comment"
              commenters:
                description: Commenters, who authored the comments
                type: array
                items:
                  $ref: "#/definitions/commenter"

  /comments/count:
    get:
      operationId: CommentCount
      summary: Get the number of comments
      tags:
        - ApiGeneral
      parameters:
        - $ref: "#/parameters/queryDomainId"
        - in: query
          name: pageId
          required: false
          description: Optional domain page ID to filter comments by
          type: string
          format: uuid
        - in: query
          name: userId
          required: false
          description: Optional user ID to filter comments by
          type: string
          format: uuid
        - in: query
          name: approved
          type: boolean
          required: false
          description: Whether to include approved comments
        - in: query
          name: pending
          type: boolean
          required: false
          description: Whether to include comments pending moderation
        - in: query
          name: rejected
          type: boolean
          required: false
          description: Whether to include rejected comments
        - in: query
          name: deleted
          type: boolean
          required: false
          description: Whether to include deleted comments
      responses:
        200:
          description: Number of comments matching the criteria
          schema:
            type: integer
            x-omitempty: false

  /comments/{uuid}:
    parameters:
      - $ref: "#/parameters/pathUuid"

    get:
      operationId: CommentGet
      summary: Get the properties of the specified comment
      tags:
        - ApiGeneral
      responses:
        200:
          description: Comment
          schema:
            type: object
            properties:
              comment:
                $ref: "#/definitions/comment"
                description: Comment properties
              commenter:
                $ref: "#/definitions/commenter"
                description: Commenter who authored the comment (optional, may not exist anymore)
              page:
                $ref: "#/definitions/domainPage"
                description: Domain page the comment is on

    delete:
      operationId: CommentDelete
      summary: Delete the specified comment
      tags:
        - ApiGeneral
      responses:
        204:
          description: Comment has been deleted

    post:
      operationId: CommentModerate
      summary: Moderate the specified comment
      tags:
        - ApiGeneral
      parameters:
        - $ref: "#/parameters/pathUuid"
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - pending
              - approve
            properties:
              pending:
                description: Whether the comment is pending moderation
                type: boolean
              approve:
                description: Whether to approve the comment
                type: boolean
      responses:
        204:
          description: Comment has been updated

  #---------------------------------------------------------------------------------------------------------------------
  # Domain users
  #---------------------------------------------------------------------------------------------------------------------

  /domain-users:
    get:
      operationId: DomainUserList
      summary: Get a list of domain users for a specific domain
      tags:
        - ApiGeneral
      parameters:
        - $ref: "#/parameters/queryDomainId"
        - $ref: "#/parameters/queryFilter"
        - $ref: "#/parameters/queryPageNumber"
        - in: query
          name: sortBy
          type: string
          enum:
            - email
            - name
            - created
          description: Property to sort results by
        - $ref: "#/parameters/querySortDesc"
      responses:
        200:
          description: List of domain users
          schema:
            type: object
            properties:
              domainUsers:
                type: array
                items:
                  $ref: "#/definitions/domainUser"
                description: List of domain users
              users:
                type: array
                items:
                  $ref: "#/definitions/user"
                description: List of users corresponding to domainUsers (can be matched by userId)

  /domain-users/{uuid}:
    parameters:
      - $ref: "#/parameters/pathUuid"

    get:
      operationId: DomainUserGet
      summary: Get properties of the specified domain user
      tags:
        - ApiGeneral
      parameters:
        - $ref: "#/parameters/queryDomainId"
      responses:
        200:
          description: Domain user properties
          schema:
            type: object
            properties:
              domainUser:
                $ref: "#/definitions/domainUser"
                description: Domain user properties
              user:
                $ref: "#/definitions/user"
                description: Properties of the user corresponding to domainUser


    put:
      operationId: DomainUserUpdate
      summary: Update properties of the specified domain user
      tags:
        - ApiGeneral
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - domainId
            properties:
              domainId:
                type: string
                format: uuid
                description: Domain ID
              isOwner:
                type: boolean
                description: Whether the user is an owner of the domain (assumes is_moderator and is_commenter)
              isModerator:
                type: boolean
                description: Whether the user is a moderator of the domain (assumes is_commenter)
              isCommenter:
                type: boolean
                description: Whether the user is a commenter of the domain (if false, the user is readonly on the domain)
      responses:
        204:
          description: Domain user properties have been updated

  #---------------------------------------------------------------------------------------------------------------------
  # Users
  #---------------------------------------------------------------------------------------------------------------------

  /users:
    get:
      operationId: UserList
      summary: Get a list of users
      tags:
        - ApiGeneral
      parameters:
        - $ref: "#/parameters/queryFilter"
        - $ref: "#/parameters/queryPageNumber"
        - in: query
          name: sortBy
          type: string
          enum:
            - email
            - name
            - signupCountry
            - federatedIdP
          description: Property to sort results by
        - $ref: "#/parameters/querySortDesc"
      responses:
        200:
          description: User list
          schema:
            type: object
            properties:
              users:
                description: User list
                type: array
                items:
                  $ref: "#/definitions/user"

  /users/{uuid}:
    parameters:
    - $ref: "#/parameters/pathUuid"

    get:
      operationId: UserGet
      summary: Get properties of a user, including domain users in domains the current user has moderator/owner rights to
      tags:
        - ApiGeneral
      responses:
        200:
          description: User properties
          schema:
            type: object
            properties:
              user:
                $ref: "#/definitions/user"
              domainUsers:
                type: array
                items:
                  $ref: "#/definitions/domainUser"
                description: Current user's properties on domains (can be linked to a domain using domainId)
              domains:
                type: array
                items:
                  $ref: "#/definitions/domain"
                description: Domains the current user has moderator/owner rights to

    put:
      operationId: UserUpdate
      summary: Update properties of a user
      tags:
        - ApiGeneral
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - user
            properties:
              user:
                $ref: "#/definitions/user"
                description: User properties
      responses:
        200:
          description: User has been updated
          schema:
            type: object
            properties:
              user:
                $ref: "#/definitions/user"
                description: The updated user

    delete:
      operationId: UserDelete
      summary: Delete a user
      tags:
        - ApiGeneral
      responses:
        204:
          description: User has been deleted

  /users/{uuid}/ban:
    post:
      operationId: UserBan
      summary: Ban or unban a user
      tags:
        - ApiGeneral
      parameters:
        - $ref: "#/parameters/pathUuid"
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - ban
            properties:
              ban:
                type: boolean
                description: Whether to ban (true) or unban (false) the user
              deleteComments:
                type: boolean
                description: Whether to remove all comments from the user (only applies if ban is true, otherwise ignored)
      responses:
        200:
          description: User has been (un)banned
          schema:
            type: object
            properties:
              countDeletedComments:
                type: integer
                description: Number of deleted comments (if opted in for deletion)
                x-omitempty: false

  /users/{uuid}/avatar:
    get:
      operationId: UserAvatarGet
      summary: Get an avatar for given user in JPEG format
      tags:
        - ApiGeneral
      security: []
      produces:
        - image/jpeg
      parameters:
        - $ref: "#/parameters/pathUuid"
        - in: query
          name: size
          required: false
          type: string
          enum:
            - S
            - M
            - L
          default: S
          description: Avatar size
      responses:
        200:
          description: User avatar in the JPEG format
          schema:
            type: file
        204:
          description: User has no avatar

  #---------------------------------------------------------------------------------------------------------------------
  # Configuration
  #---------------------------------------------------------------------------------------------------------------------

  /config:
    get:
      operationId: ConfigGet
      summary: Obtain instance configuration
      tags:
        - ApiGeneral
      security: []
      responses:
        200:
          description: Instance configuration
          schema:
            type: object
            required:
              - static
            properties:
              staticConfig:
                $ref: "#/definitions/instanceStaticConfig"
                description: Static instance configuration
              dynamicConfig:
                type: array
                items:
                  $ref: "#/definitions/instanceDynamicConfigItem"
                description: Dynamic instance configuration items

    patch:
      operationId: ConfigDynamicUpdate
      summary: Update dynamic instance configuration items
      tags:
        - ApiGeneral
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: array
            items:
              $ref: "#/definitions/instanceDynamicConfigItem"
            description: Instance configuration items to modify. Omitted items will not be modified
      responses:
        204:
          description: Dynamic instance configuration has been updated

    delete:
      operationId: ConfigDynamicReset
      summary: Reset the dynamic instance configuration to its defaults
      tags:
        - ApiGeneral
      responses:
        204:
          description: Dynamic instance configuration has been reset

  /config/extensions:
    get:
      operationId: ConfigExtensionsGet
      summary: Obtain a list of enabled extensions
      tags:
        - ApiGeneral
      responses:
        200:
          description: List of enabled extensions
          schema:
            type: object
            properties:
              extensions:
                type: array
                items:
                  $ref: "#/definitions/domainExtension"
                description: List of extensions, with a default configuration

  #---------------------------------------------------------------------------------------------------------------------
  # Testing endpoints
  # These endpoints are only available during the test cycle and never in production
  #---------------------------------------------------------------------------------------------------------------------

  /e2e/reset:
    post:
      operationId: E2eReset
      summary: Reset the backend (all settings and database) to testing defaults
      tags:
        - ApiE2e
      security: []
      responses:
        204:
          description: The backend has been successfully reset

  /e2e/config/dynamic:
    put:
      operationId: E2eConfigDynamicItemSet
      summary: Update dynamic instance configuration item
      tags:
        - ApiE2e
      security: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/instanceDynamicConfigItem"
      responses:
        204:
          description: Dynamic instance configuration item has been updated

  /e2e/mails:
    get:
      operationId: E2eMailsGet
      summary: Obtain a list of all sent emails
      tags:
        - ApiE2e
      security: []
      responses:
        200:
          description: List of sent emails
          schema:
            type: array
            items:
              type: object
              properties:
                headers:
                  type: object
                  x-omitempty: false
                embedFiles:
                  type: array
                  items:
                    type: string
                  x-omitempty: false
                body:
                  type: string
                  x-omitempty: false
                succeeded:
                  type: boolean
                  x-omitempty: false

  /e2e/oauth/{uuid}/sso/noninteractive:
    get:
      operationId: E2eOAuthSSONonInteractive
      summary: Perform a fake non-interactive SSO-auth for a domain with the given UUID
      tags:
        - ApiE2e
      security: []
      parameters:
        - $ref: "#/parameters/pathUuid"
        - $ref: "#/parameters/queryToken"
        - in: query
          name: hmac
          required: true
          type: string
          minLength: 64
          maxLength: 64
          pattern: '[0-9a-f]{64}'
          description: HMAC signature for token
      responses:
        302:
          description: Auth successful, redirecting to the callback URL
          headers:
            Location:
              type: string
