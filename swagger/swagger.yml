info:
  title: Comentario
  version: 1.0.0
consumes:
  - application/json
produces:
  - application/json
schemes:
  - http
swagger: "2.0"
basePath: /api

securityDefinitions:
  # Cookie authentication for commenters
  commenterTokenHeader:
    type: apiKey
    in: header
    name: X-Commenter-Token

  # Cookie authentication for users (other than commenters). Uses the apiKey type for the lack of a proper cookie-based
  # authentication in Swagger 2
  userCookie:
    type: apiKey
    in: header
    name: Cookie

# Default security is cookie-based user authentication
security:
  - userCookie: []

definitions:

  clientConfig:
    description: Client configuration
    type: object
    readOnly: true
    required:
      - baseUrl
      - signupAllowed
      - idps
    properties:
      baseUrl:
        type: string
        x-isnullable: false
        description: Base Comentario URL
      signupAllowed:
        type: boolean
        x-isnullable: false
        description: Whether registration of new users is allowed
      idps:
        type: array
        items:
          $ref: "#/definitions/identityProvider"
        description: Configured federated identity providers

  comment:
    type: object
    properties:
      commentHex:
        $ref: "#/definitions/hexId"
      commenterHex:
        $ref: "#/definitions/hexId"
      parentHex:
        $ref: "#/definitions/parentHexId"
      host:
        $ref: "#/definitions/host"
      creationDate:
        type: string
        format: date-time
      state:
        $ref: "#/definitions/commentState"
      deleted:
        type: boolean
        x-omitempty: false
      direction:
        type: integer
        x-omitempty: false
      score:
        type: integer
        x-omitempty: false
      markdown:
        type: string
      html:
        type: string
      path:
        type: string

  commenter:
    type: object
    properties:
      commenterHex:
        $ref: "#/definitions/hexId"
      email:
        type: string
        format: email
      name:
        type: string
      websiteUrl:
        type: string
        format: uri
      avatarUrl:
        type: string
        format: uri
      provider:
        type: string
      joinDate:
        type: string
        format: date-time
      isModerator:
        type: boolean
        x-omitempty: false

  commentState:
    description: Comment state
    type: string
    enum:
      - approved
      - unapproved
      - flagged

  domain:
    description: Registered domain
    type: object
    required:
      - host
      - state
      - defaultSortPolicy
      - emailNotificationPolicy
      - idps
    properties:
      host:
        $ref: "#/definitions/host"
        description: Host, with an optional port number, the domain is configured on
      displayName:
        type: string
        description: Display name of the domain
        maxLength: 255
        x-isnullable: false
      state:
        $ref: "#/definitions/domainState"
        description: Domain state
      autoSpamFilter:
        type: boolean
        description: Whether automatic spam detection is active
        x-omitempty: false
        x-isnullable: false
      requireModeration:
        type: boolean
        description: Whether every comment is subject to an approval by a moderator
        x-omitempty: false
        x-isnullable: false
      requireIdentification:
        type: boolean
        description: Whether anonymous comments are disabled
        x-omitempty: false
        x-isnullable: false
      moderateAllAnonymous:
        type: boolean
        description: Whether anonymous comments are subject to an approval by a moderator
        x-omitempty: false
        x-isnullable: false
      defaultSortPolicy:
        $ref: "#/definitions/sortPolicy"
        description: Default comment sorting for the domain
      emailNotificationPolicy:
        $ref: "#/definitions/emailNotificationPolicy"
        description: Email notification policy for new comments
      idps:
        type: array
        items:
          $ref: "#/definitions/identityProviderId"
        description: >
          List of IDs of identity providers enabled for this domain. Must be a subset of the local auth (id == ''), SSO
          (id == 'sso'; only when ssoUrl is set) and all federated IdPs configured for this instance (see clientConfig)
      ssoUrl:
        type: string
        format: uri
        description: URL of the SSO server
      ssoSecret:
        type: string
        readOnly: true
        description: SSO secret
      creationDate:
        type: string
        format: date-time
        readOnly: true
        description: Timestamp when the domain was created
      moderators:
        type: array
        items:
          $ref: "#/definitions/domainModerator"
        readOnly: true
        description: List of domain moderators

  domainModerator:
    description: Domain moderator
    type: object
    properties:
      email:
        type: string
        format: email
      host:
        $ref: "#/definitions/host"
      addDate:
        type: string
        format: date-time

  domainState:
    description: Domain state
    type: string
    enum:
      - unfrozen
      - frozen
    x-isnullable: false

  email:
    type: object
    properties:
      email:
        type: string
        format: email
      unsubscribeSecretHex:
        $ref: "#/definitions/hexId"
      lastEmailNotificationDate:
        type: string
        format: date-time
      sendReplyNotifications:
        type: boolean
        x-omitempty: false
      sendModeratorNotifications:
        type: boolean
        x-omitempty: false

  emailNotificationPolicy:
    description: Email notification policy
    type: string
    enum:
      - all
      - none
      - pending-moderation
    x-isnullable: false

  entity:
    description: Entity for resetting the password
    type: string
    enum:
      - owner
      - commenter

  error:
    description: Generic error object
    type: object
    readOnly: true
    properties:
      id:
        type: string
      message:
        type: string
      details:
        type: string
    x-go-type:
      import:
        package: "gitlab.com/comentario/comentario/internal/api/exmodels"
      type: "Error"

  federatedIdpId:
    description: Federated identity provider ID
    type: string
    enum:
      - github
      - gitlab
      - google
      - twitter

  hexId:
    description: ID consisting of 64 hex digits
    type: string
    minLength: 64
    maxLength: 64
    pattern: '[0-9a-f]{64}'

  host:
    description: DNS hostname, with an optional port number
    example: example.com:8080
    type: string
    minLength: 1
    maxLength: 259  # 253 (max length of a DNS name) + ":" + 5 (port number 1..65535)
    pattern: "[-.a-z0-9]{1,253}(:[0-9]{1-5})?"
    x-isnullable: false

  identityProvider:
    description: Generalised identity provider info
    type: object
    required:
      - id
      - name
    properties:
      id:
        $ref: "#/definitions/identityProviderId"
        description: Provider ID
        example: github
      name:
        type: string
        description: >
          Provider name. Ignored when the provider spec is received as input for an operation (e.g. when saving a 
          domain)
        x-isnullable: false
        example: GitHub

  identityProviderId:
    description: ID of an identity provider
    type: string
    enum:
      - ''       # Local auth
      - sso      # Single Sign-On
      - github   # From this point on are the federated IdP IDs
      - gitlab
      - google
      - twitter
    x-isnullable: false

  page:
    description: Page hosting comments
    type: object
    required:
      - host
    properties:
      host:
        $ref: "#/definitions/host"
      path:
        type: string
      isLocked:
        type: boolean
        x-omitempty: false
      stickyCommentHex:
        $ref: "#/definitions/hexId"
      commentCount:
        type: integer
        readOnly: true
        x-omitempty: false
      title:
        type: string
        readOnly: true

  parentHexId:
    description: ID similar to HexID, consisting of 64 hex digits, which can also be 'root'
    type: string
    maxLength: 64
    pattern: 'root|[0-9a-f]{64}'

  principal:
    description: Authenticated user (excludes commenters for now)
    type: object
    readOnly: true
    properties:
      id:
        $ref: "#/definitions/hexId"
      email:
        type: string
        format: email
      name:
        type: string
      isConfirmed:
        type: boolean
        x-omitempty: false

  sortPolicy:
    description: Sort policy
    type: string
    enum:
      - score-desc
      - creationdate-desc
      - creationdate-asc
    x-isnullable: false

parameters:

  federatedIdpId:
    in: path
    name: provider
    required: true
    description: Federated identity provider ID
    type: string
    enum:
      - github
      - gitlab
      - google
      - twitter

  pathImportSource:
    name: source
    in: path
    required: true
    description: Source of the data to import into a domain
    type: string
    enum:
      - commento
      - disqus

  pathHost:
    name: host
    in: path
    required: true
    description: Domain host path parameter
    type: string
    minLength: 1
    maxLength: 259
    pattern: "[-.a-z0-9]{1,253}(:[0-9]{1-5})?"

  pathId:
    in: path
    name: id
    required: true
    description: ID consisting of 64 hex digits, in the path
    type: string
    minLength: 64
    maxLength: 64
    pattern: '[0-9a-f]{64}'

  queryToken:
    in: query
    name: token
    required: true
    description: ID consisting of 64 hex digits, in the query parameter
    type: string
    minLength: 64
    maxLength: 64
    pattern: '[0-9a-f]{64}'

responses:
  # 400
  BadRequest:
    description: Invalid input data has been passed
    schema:
      $ref: "#/definitions/error"

  # 401
  Unauthorised:
    description: User is not authorised
    schema:
      $ref: "#/definitions/error"

  # 403
  Forbidden:
    description: The specified operation is not allowed
    schema:
      $ref: "#/definitions/error"

  # 404
  NotFound:
    description: The specified resource was not found
    schema:
      $ref: "#/definitions/error"

  # 422
  UnprocessableEntity:
    description: Invalid input data has been passed
    schema:
      $ref: "#/definitions/error"

  # 500
  InternalError:
    description: Server experiences an internal error
    schema:
      $ref: "#/definitions/error"

  # 307
  OAuthRedirect:
    description: Redirecting to a federated identity provider
    headers:
      Location:
        type: string

  # 401
  OAuthFailure:
    description: Authentication failed
    schema:
      type: string

paths:
  /_:
    options:
      operationId: Generic
      summary: Fake endpoint to provide generic errors
      tags:
        - ApiGeneric
      responses:
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorised"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"
        500:
          $ref: "#/responses/InternalError"

  #---------------------------------------------------------------------------------------------------------------------
  # Config
  #---------------------------------------------------------------------------------------------------------------------

  /config/client:
    get:
      operationId: ConfigClientGet
      summary: Obtain client configuration
      tags:
        - ApiGeneric
      security: []
      responses:
        200:
          description: Client configuration
          schema:
            $ref: "#/definitions/clientConfig"

  #---------------------------------------------------------------------------------------------------------------------
  # Auth
  #---------------------------------------------------------------------------------------------------------------------

  /auth/login:
    post:
      operationId: AuthLogin
      summary: Sign in as an existing user
      tags:
        - ApiAuth
      security: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                minLength: 1
                maxLength: 63
      responses:
        200:
          description: Login successful
          schema:
            $ref: "#/definitions/principal"

  /auth/logout:
    post:
      operationId: AuthLogout
      summary: Log the current user out
      tags:
        - ApiAuth
      responses:
        204:
          description: User has been logged out

  /auth/profile:
    post:
      operationId: AuthSignup
      summary: Sign up as a new owner
      tags:
        - ApiAuth
      security: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - name
              - email
              - password
            properties:
              name:
                type: string
                minLength: 1
                maxLength: 63
              email:
                type: string
                format: email
              password:
                type: string
                minLength: 1
                maxLength: 63
      responses:
        200:
          description: Owner has signed up successfully
          schema:
            type: object
            properties:
              confirmEmail:
                type: boolean
                description: Whether a confirmation email was sent
                x-omitempty: false

    put:
      operationId: AuthConfirm
      summary: Confirm specified owner's email using the emailed token
      tags:
        - ApiAuth
      security: []
      parameters:
        - $ref: "#/parameters/queryToken"
      responses:
        307:
          description: Redirect to login
          headers:
            Location:
              type: string

    delete:
      operationId: AuthDeleteProfile
      summary: Delete the account of the current user
      tags:
        - ApiAuth
      responses:
        204:
          description: Owner's account has been deleted

  #---------------------------------------------------------------------------------------------------------------------
  # Current user
  #---------------------------------------------------------------------------------------------------------------------

  /user:
    get:
      operationId: CurUserGet
      summary: Fetch the currently authenticated user, if any
      tags:
        - ApiAuth
      security: []
      responses:
        200:
          description: User is authenticated, principal info returned
          schema:
            $ref: "#/definitions/principal"
        204:
          description: User is not authenticated

    put:
      operationId: CurUserProfileUpdate
      summary: Update profile details of the current user
      tags:
        - ApiAuth
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                minLength: 1
                maxLength: 63
                description: New full name of the user
              curPassword:
                type: string
                minLength: 1
                maxLength: 63
                description: Current password of the user. Required if newPassword is given, otherwise ignored
              newPassword:
                type: string
                minLength: 1
                maxLength: 63
                description: New password to set for the user. Optional, if not provided, the password remains unchanged
      responses:
        204:
          description: User profile has been updated

  /user/pwdreset:
    post:
      operationId: CurUserPwdResetSendEmail
      summary: Request user's password reset by sending them an email
      tags:
        - ApiAuth
      security: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                format: email
      responses:
        204:
          description: Reset email has been sent, if the email is known

    put:
      operationId: CurUserPwdResetChange
      summary: Give the user a new password
      tags:
        - ApiAuth
      security: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - token
              - password
            properties:
              token:
                $ref: "#/definitions/hexId"
                description: Password reset token provided in the reset email
              password:
                type: string
                description: New password to set
                minLength: 1
                maxLength: 63
      responses:
        204:
          description: Password has been reset

  #---------------------------------------------------------------------------------------------------------------------
  # Comments
  #---------------------------------------------------------------------------------------------------------------------

  /comment/approve:
    post:
      operationId: CommentApprove
      summary: Approve specified unapproved comment
      tags:
        - ApiCommenter
      security:
        - commenterTokenHeader: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - commentHex
            properties:
              commentHex:
                $ref: "#/definitions/hexId"
      responses:
        204:
          description: Comment has been approved

  /comment/count:
    post:
      operationId: CommentCount
      summary: Request comment counts for specified paths on given domain
      tags:
        - ApiCommenter
      security: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - host
              - paths
            properties:
              host:
                $ref: "#/definitions/host"
              paths:
                type: array
                items:
                  type: string
                minItems: 1
                maxItems: 32
      responses:
        200:
          description: Comment counts per path
          schema:
            type: object
            properties:
              commentCounts:
                type: object # map[string]int

  /comment/delete:
    post:
      operationId: CommentDelete
      summary: Delete specified comment
      tags:
        - ApiCommenter
      security:
        - commenterTokenHeader: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - commentHex
            properties:
              commentHex:
                $ref: "#/definitions/hexId"
      responses:
        204:
          description: Comment has been deleted

  /comment/edit:
    post:
      operationId: CommentEdit
      summary: Update specified comment
      tags:
        - ApiCommenter
      security:
        - commenterTokenHeader: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - commentHex
              - markdown
            properties:
              commentHex:
                $ref: "#/definitions/hexId"
              markdown:
                type: string
      responses:
        200:
          description: Comment is updated, returning the resulting HTML
          schema:
            type: object
            properties:
              html:
                type: string

  /comment/list:
    post:
      operationId: CommentList
      summary: Get a list of comments and commenters for the given host/path combination
      tags:
        - ApiCommenter
      security:
        - commenterTokenHeader: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - host
            properties:
              host:
                $ref: "#/definitions/host"
              path:
                type: string
      responses:
        200:
          description: Comment and commenter list
          schema:
            type: object
            properties:
              host:
                $ref: "#/definitions/host"
              comments:
                type: array
                items:
                  $ref: "#/definitions/comment"
              commenters:
                type: object # map[string]commenter
              requireModeration:
                type: boolean
                x-omitempty: false
              requireIdentification:
                type: boolean
                x-omitempty: false
              isFrozen:
                type: boolean
                x-omitempty: false
              isModerator:
                type: boolean
                x-omitempty: false
              defaultSortPolicy:
                $ref: "#/definitions/sortPolicy"
              attributes:
                $ref: "#/definitions/page"
              idps:
                type: array
                items:
                  $ref: "#/definitions/identityProviderId"
                description: List of IDs of enabled identity providers

  /comment/new:
    post:
      operationId: CommentNew
      summary: Add a new comment
      tags:
        - ApiCommenter
      security:
        - commenterTokenHeader: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - host
              - parentHex
              - markdown
            properties:
              host:
                $ref: "#/definitions/host"
              path:
                type: string
              parentHex:
                $ref: "#/definitions/parentHexId"
              markdown:
                type: string
      responses:
        200:
          description: Comment is added
          schema:
            type: object
            properties:
              commentHex:
                $ref: "#/definitions/hexId"
              commenterHex:
                $ref: "#/definitions/hexId"
              html:
                type: string
              state:
                $ref: "#/definitions/commentState"

  /comment/vote:
    post:
      operationId: CommentVote
      summary: Vote for specified comment
      tags:
        - ApiCommenter
      security:
        - commenterTokenHeader: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - commentHex
              - direction
            properties:
              commentHex:
                $ref: "#/definitions/hexId"
              direction:
                type: integer
                enum:
                  - -1
                  - 0
                  - 1
      responses:
        204:
          description: Vote has been applied

  #---------------------------------------------------------------------------------------------------------------------
  # Commenters
  #---------------------------------------------------------------------------------------------------------------------

  /commenter/login:
    post:
      operationId: CommenterLogin
      summary: Sign in as specified commenter
      tags:
        - ApiCommenter
      security: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                minLength: 1
      responses:
        200:
          description: Logged in successfully
          schema:
            type: object
            properties:
              commenterToken:
                $ref: "#/definitions/hexId"
              commenter:
                $ref: "#/definitions/commenter"
              email:
                $ref: "#/definitions/email"

  /commenter/logout:
    post:
      operationId: CommenterLogout
      summary: Log the currently signed-in commenter out
      tags:
        - ApiCommenter
      security:
        - commenterTokenHeader: []
      responses:
        204:
          description: Logged out successfully

  /commenter/new:
    post:
      operationId: CommenterNew
      summary: Sign up as a new commenter
      tags:
        - ApiCommenter
      security: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
              - name
              - password
            properties:
              email:
                type: string
                format: email
              name:
                type: string
                minLength: 1
                maxLength: 63
              password:
                type: string
                minLength: 1
                maxLength: 63
              websiteUrl:
                type: string
                format: uri
      responses:
        204:
          description: Commenter signed up successfully

  /commenter/photo/{id}:
    get:
      operationId: CommenterPhoto
      summary: Get an avatar for given commenter in JPEG format
      tags:
        - ApiCommenter
      security: []
      produces:
        - image/jpeg
      parameters:
        - $ref: "#/parameters/pathId"
      responses:
        200:
          description: Success or failure response (see 'success' property)
          schema:
            type: file

  /commenter/self:
    post:
      operationId: CommenterSelf
      summary: Request commenter's sign-in status and, if the commenter's signed in, their details
      tags:
        - ApiCommenter
      security: []
      responses:
        204:
          description: Commenter is not signed in
        200:
          description: Commenter is signed in
          schema:
            type: object
            properties:
              commenter:
                $ref: "#/definitions/commenter"
              email:
                $ref: "#/definitions/email"

  /commenter/token/new:
    post:
      operationId: CommenterTokenNew
      summary: Request a new anonymous, unique commenter token
      tags:
        - ApiCommenter
      security: []
      responses:
        200:
          description: Commenter token
          schema:
            type: object
            properties:
              commenterToken:
                $ref: "#/definitions/hexId"

  /commenter/update:
    post:
      operationId: CommenterUpdate
      summary: Update commenter details
      tags:
        - ApiCommenter
      security:
        - commenterTokenHeader: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
              - name
            properties:
              email:
                type: string
                format: email
              name:
                type: string
                minLength: 1
                maxLength: 63
              websiteUrl:
                type: string
                format: uri
              avatarUrl:
                type: string
                format: uri
      responses:
        204:
          description: Commenter details haven been updated

  #---------------------------------------------------------------------------------------------------------------------
  # Domains
  #---------------------------------------------------------------------------------------------------------------------

  /domains:
    get:
      operationId: DomainList
      summary: Get a list of registered domains
      tags:
        - ApiOwner
      responses:
        200:
          description: List of domains
          schema:
            type: object
            properties:
              domains:
                type: array
                items:
                  $ref: "#/definitions/domain"

    post:
      operationId: DomainNew
      summary: Register a new domain
      tags:
        - ApiOwner
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - domain
            properties:
              domain:
                $ref: "#/definitions/domain"
      responses:
        204:
          description: Domain added successfully

    put:
      operationId: DomainUpdate
      summary: Update properties of specified domain
      tags:
        - ApiOwner
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - domain
            properties:
              domain:
                $ref: "#/definitions/domain"
      responses:
        204:
          description: Domain properties have been updated

  /domains/{host}:
    parameters:
      - $ref: "#/parameters/pathHost"

    get:
      operationId: DomainGet
      summary: Get properties of a domain
      tags:
        - ApiOwner
      responses:
        200:
          description: Domain properties
          schema:
            $ref: "#/definitions/domain"

    delete:
      operationId: DomainDelete
      summary: Delete a domain
      tags:
        - ApiOwner
      responses:
        204:
          description: Domain has been deleted

    post:
      operationId: DomainClear
      summary: Clear all domain's pages/comments/votes
      tags:
        - ApiOwner
      responses:
        204:
          description: Domain has been cleared

    put:
      operationId: DomainToggleFrozen
      summary: Freeze or unfreeze the domain
      tags:
        - ApiOwner
      responses:
        204:
          description: Domain frozen status has been toggled

  /domains/{host}/export/begin:
    post:
      operationId: DomainExportBegin
      summary: Initiate domain data export
      tags:
        - ApiOwner
      parameters:
        - $ref: "#/parameters/pathHost"
      responses:
        204:
          description: Export has been successfully started

  /domains/export/download/{id}:
    get:
      operationId: DomainExportDownload
      summary: Download previously exported domain data
      tags:
        - ApiOwner
      security: []
      produces:
        - application/gzip
      parameters:
        - $ref: "#/parameters/pathId"
      responses:
        200:
          description: Export file
          schema:
            type: file
          headers:
            Content-Disposition:
              type: string

  /domains/{host}/import/{source}:
    post:
      operationId: DomainImport
      summary: Import comments and commenters into specified domain from exported data, downloaded from certain URL
      tags:
        - ApiOwner
      parameters:
        - $ref: "#/parameters/pathHost"
        - $ref: "#/parameters/pathImportSource"
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - url
            properties:
              url:
                type: string
                format: uri
      responses:
        200:
          description: Import completed successfully
          schema:
            type: object
            properties:
              numImported:
                type: integer
                description: Number of imported comments
                x-omitempty: false

  /domains/{host}/moderators:
    parameters:
      - $ref: "#/parameters/pathHost"

    post:
      operationId: DomainModeratorNew
      summary: Add a new domain moderator
      tags:
        - ApiOwner
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                format: email
      responses:
        204:
          description: Domain moderator has been added

    delete:
      operationId: DomainModeratorDelete
      summary: Delete specified domain moderator
      tags:
        - ApiOwner
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                format: email
      responses:
        204:
          description: Domain moderator has been deleted

  /domains/{host}/sso/new:
    post:
      operationId: DomainSsoSecretNew
      summary: Generate an SSO secret for specified domain
      tags:
        - ApiOwner
      parameters:
        - $ref: "#/parameters/pathHost"
      responses:
        200:
          description: SSO secret has been generated for the domain
          schema:
            type: object
            properties:
              ssoSecret:
                $ref: "#/definitions/hexId"

  /domains/{host}/stats:
    get:
      operationId: DomainStatistics
      summary: Get comment and view statistics for specified domain
      tags:
        - ApiOwner
      parameters:
        - $ref: "#/parameters/pathHost"
      responses:
        200:
          description: Success or failure response (see 'success' property)
          schema:
            type: object
            properties:
              viewsLast30Days:
                type: array
                items:
                  type: integer
              commentsLast30Days:
                type: array
                items:
                  type: integer

  #---------------------------------------------------------------------------------------------------------------------
  # Emails
  #---------------------------------------------------------------------------------------------------------------------

  /email/get:
    post:
      operationId: EmailGet
      summary: Get email properties for specified unsubscribe token
      tags:
        - ApiCommenter
      security: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - unsubscribeSecretHex
            properties:
              unsubscribeSecretHex:
                $ref: "#/definitions/hexId"
      responses:
        200:
          description: Email object
          schema:
            type: object
            properties:
              email:
                $ref: "#/definitions/email"

  /email/moderate:
    get:
      operationId: EmailModerate
      summary: Apply a moderator action to specified comment
      tags:
        - ApiCommenter
      security: []
      parameters:
        - name: unsubscribeSecretHex
          in: query
          type: string
          required: true
          minLength: 64
          maxLength: 64
        - name: action
          in: query
          type: string
          required: true
          enum:
            - approve
            - delete
        - name: commentHex
          in: query
          type: string
          required: true
          minLength: 64
          maxLength: 64
      responses:
        204:
          description: Action has been applied

  /email/update:
    post:
      operationId: EmailUpdate
      summary: Update properties of specified email
      tags:
        - ApiCommenter
      security: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
            properties:
              email:
                $ref: "#/definitions/email"
      responses:
        204:
          description: Email properties have been updated

  #---------------------------------------------------------------------------------------------------------------------
  # Pages
  #---------------------------------------------------------------------------------------------------------------------

  /page/update:
    post:
      operationId: PageUpdate
      summary: Update specified page's properties
      tags:
        - ApiCommenter
      security:
        - commenterTokenHeader: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - page
            properties:
              page:
                $ref: "#/definitions/page"
      responses:
        204:
          description: Page properties have been updated

  #---------------------------------------------------------------------------------------------------------------------
  # OAuth
  #---------------------------------------------------------------------------------------------------------------------

  /oauth/{provider}:
    get:
      operationId: OauthInit
      summary: Initiate signing in using federated authentication
      tags:
        - ApiCommenter
      security: []
      produces:
        - text/html # For an error response only, otherwise a redirect is issued
      parameters:
        - $ref: "#/parameters/federatedIdpId"
        - $ref: "#/parameters/queryToken"
      responses:
        307:
          $ref: "#/responses/OAuthRedirect"
        401:
          $ref: "#/responses/OAuthFailure"

  /oauth/{provider}/callback:
    get:
      operationId: OauthCallback
      summary: Endpoint that gets called back by the federated authentication provider
      tags:
        - ApiCommenter
      security: []
      produces:
        - text/html
      parameters:
        - $ref: "#/parameters/federatedIdpId"
      responses:
        200:
          description: User has successfully signed in
        401:
          $ref: "#/responses/OAuthFailure"

  /oauth/sso:
    get:
      operationId: OauthSsoInit
      summary: Initiate signing in using federated SSO authentication
      tags:
        - ApiCommenter
      security: []
      produces:
        - text/html # For an error response only, otherwise a redirect is issued
      parameters:
        - $ref: "#/parameters/queryToken"
      responses:
        307:
          $ref: "#/responses/OAuthRedirect"
        401:
          $ref: "#/responses/OAuthFailure"

  /oauth/sso/callback:
    get:
      operationId: OauthSsoCallback
      summary: Endpoint that gets called back by the SSO authentication provider
      tags:
        - ApiCommenter
      security: []
      produces:
        - text/html
      parameters:
        - in: query
          name: payload
          type: string
          required: true
          minLength: 1
        - in: query
          name: hmac
          type: string
          required: true
          minLength: 1
      responses:
        200:
          description: User has successfully signed in
        401:
          $ref: "#/responses/OAuthFailure"

  #---------------------------------------------------------------------------------------------------------------------
  # Testing endpoints
  # These endpoints are only available during the test cycle and never in production
  #---------------------------------------------------------------------------------------------------------------------

  /e2e/reset:
    post:
      operationId: E2eReset
      summary: Reset the backend (all settings and database) to testing defaults
      tags:
        - ApiE2e
      security: []
      responses:
        204:
          description: The backend has been successfully reset
