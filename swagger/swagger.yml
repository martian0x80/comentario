info:
  title: Comentario
  version: 1.0.0
consumes:
  - application/json
produces:
  - application/json
schemes:
  - http
swagger: "2.0"
basePath: /api

securityDefinitions:
  # Header authentication for commenters (used by the embed part). Apart from the delivery method, its difference from
  # the userCookie security is that userSessionHeader allows to 'authenticate' as an anonymous user
  userSessionHeader:
    type: apiKey
    in: header
    name: X-User-Session

  # Cookie authentication for users (used by the frontend part). Uses the apiKey type for the lack of a proper
  # cookie-based authentication in Swagger 2
  userCookie:
    type: apiKey
    in: header
    name: Cookie

  # Token authentication for certain endpoints, called externally, such as password reset or email confirmation
  token:
    type: oauth2
    flow: accessCode
    authorizationUrl: http://dummy/
    tokenUrl: http://dummy/
    scopes:
      pwd-reset: reset user's password
      confirm-email: confirm user's email

# Default security is cookie-based user authentication
security:
  - userCookie: []

definitions:

  comentarioConfig:
    description: Server configuration
    type: object
    readOnly: true
    required:
      - baseUrl
      - version
      - buildDate
      - signupAllowed
      - newOwnersAllowed
      - federatedIdps
    properties:
      baseUrl:
        type: string
        x-isnullable: false
        description: Base Comentario URL
      version:
        type: string
        x-isnullable: false
        description: Comentario version
      buildDate:
        type: string
        format: date-time
        x-isnullable: false
        description: Server build date
      signupAllowed:
        type: boolean
        x-isnullable: false
        description: Whether registration of new users (including commenters) is allowed
      newOwnersAllowed:
        type: boolean
        x-isnullable: false
        description: Whether non-owner users can add domains (and become owners)
      federatedIdps:
        type: array
        items:
          $ref: "#/definitions/federatedIdentityProvider"
        description: Configured federated identity providers

  comment:
    description: Comment residing on a page
    type: object
    readOnly: true
    properties:
      id:
        type: string
        format: uuid
        description: Unique record ID
      parentId:
        type: string
        format: uuid
        description: Parent record ID, null if it's a root comment on the page
      pageId:
        type: string
        format: uuid
        description: ID of the page
      markdown:
        type: string
        description: Comment text in markdown
      html:
        type: string
        description: Rendered comment text in HTML
      score:
        type: integer
        description: Comment score
        x-omitempty: false
      isSticky:
        type: boolean
        description: Whether the comment is sticky (attached to the top of page)
        x-omitempty: false
      isApproved:
        type: boolean
        description: Whether the comment is approved and can be seen by everyone
        x-omitempty: false
      isPending:
        type: boolean
        description: Whether the comment is pending approval
        x-omitempty: false
      isDeleted:
        type: boolean
        description: Whether the comment is marked as deleted
        x-omitempty: false
      createdTime:
        type: string
        format: date-time
        description: When the comment was created
      userCreated:
        type: string
        format: uuid
        description: ID of the user who created the comment
      direction:
        type: integer
        format: int8
        description: Vote direction for the current user

  commenter:
    description: Stripped-down, read-only version of the user who authored a comment
    type: object
    properties:
      id:
        type: string
        format: uuid
        description: Unique user ID
      email:
        type: string
        format: email
        description: Email address of the user
      name:
        type: string
        description: Full name of the user
      websiteUrl:
        type: string
        format: uri
        description: URL of the user's website
      hasAvatar:
        type: boolean
        description: Whether the user has an avatar image
        x-omitempty: false
      isModerator:
        type: boolean
        description: Whether the user is a moderator on this specific domain
        x-omitempty: false
      isCommenter:
        type: boolean
        description: Whether the user is a commenter on this specific domain (false means the user is read-only)
        x-omitempty: false

  commentSort:
    description: Comment sorting. 1st letter defines the property, 2nd letter the direction
    type: string
    minLength: 2
    maxLength: 2
    enum:
      - ta # By timestamp, ascending
      - td # By timestamp, descending
      - sa # By score, ascending
      - sd # By score, descending
    x-isnullable: false

  dailyViewCommentStats:
    description: Daily statistical data on views and comments
    type: object
    readOnly: true
    properties:
      viewCounts:
        type: array
        items:
          type: integer
          format: uint
        description: Numbers of views, one value per day
      commentCounts:
        type: array
        items:
          type: integer
          format: uint
        description: Numbers of comments, one value per day

  domain:
    description: Registered domain
    type: object
    required:
      - host
    properties:
      id:
        type: string
        format: uuid
        readOnly: true
        description: Unique domain ID
      name:
        type: string
        maxLength: 255
        description: Domain display name
      host:
        $ref: "#/definitions/host"
        description: Domain host
      createdTime:
        type: string
        format: date-time
        readOnly: true
        description: When the domain was created
      isReadonly:
        type: boolean
        description: Whether the domain is readonly (no new comments are allowed)
        x-omitempty: false
      authAnonymous:
        type: boolean
        description: Whether anonymous comments are allowed
        x-omitempty: false
      authLocal:
        type: boolean
        description: Whether local authentication is allowed
        x-omitempty: false
      authSso:
        type: boolean
        description: Whether SSO authentication is allowed
        x-omitempty: false
      ssoUrl:
        type: string
        description: SSO provider URL
      modAnonymous:
        type: boolean
        description: Whether all anonymous comments are to be approved by a moderator
        x-omitempty: false
      modAuthenticated:
        type: boolean
        description: Whether all non-anonymous comments are to be approved by a moderator
        x-omitempty: false
      modNumComments:
        type: integer
        format: uint
        description: Number of first comments by user on this domain that require a moderator approval
        x-omitempty: false
      modUserAgeDays:
        type: integer
        format: uint
        description: Number of first days since user has registered on this domain to require a moderator approval on their comments
        x-omitempty: false
      modLinks:
        type: boolean
        description: Whether all comments containing a link are to be approved by a moderator
        x-omitempty: false
      modImages:
        type: boolean
        description: Whether all comments containing an image are to be approved by a moderator
        x-omitempty: false
      modNotifyPolicy:
        $ref: "#/definitions/domainModNotifyPolicy"
        description: Moderator notification policy for domain
      defaultSort:
        $ref: "#/definitions/commentSort"
        description: Default comment sorting for domain
      countComments:
        type: integer
        readOnly: true
        description: Total number of comments
        x-omitempty: false
      countViews:
        type: integer
        readOnly: true
        description: Total number of views
        x-omitempty: false

  domainModNotifyPolicy:
    description: Moderator notification policy for domain
    type: string
    enum:
      - none
      - pending
      - all
    x-isnullable: false

  apiError:
    description: Generic API error object
    type: object
    readOnly: true
    properties:
      id:
        type: string
      message:
        type: string
      details:
        type: string
    x-go-type:
      import:
        package: "gitlab.com/comentario/comentario/internal/api/exmodels"
      type: "Error"

  federatedIdentityProvider:
    description: Federated identity provider info
    type: object
    required:
      - id
      - name
      - icon
    properties:
      id:
        $ref: "#/definitions/federatedIdpId"
        description: Provider ID
        example: github
      name:
        type: string
        description: Provider name
        x-isnullable: false
        example: GitHub
      icon:
        type: string
        description: Provider icon name
        x-isnullable: false
        example: github

  federatedIdpId:
    description: Federated identity provider ID, a subset of identityProviderId
    type: string
    enum:
      - github
      - gitlab
      - google
      - twitter
    x-isnullable: false

  host:
    description: DNS hostname, with an optional port number
    example: example.com:8080
    type: string
    minLength: 1
    maxLength: 259  # 253 (max length of a DNS name) + ":" + 5 (port number 1..65535)
    pattern: "[-.a-z0-9]{1,253}(:[0-9]{1-5})?"
    x-isnullable: false

  pageInfo:
    description: Information about a page displaying comments
    type: object
    readOnly: true
    properties:
      domainId:
        type: string
        format: uuid
        description: Domain ID
      domainName:
        type: string
        description: Domain display name
      pageId:
        type: string
        format: uuid
        description: Page ID
      isDomainReadonly:
        type: boolean
        description: Whether the domain is readonly (no new comments are allowed)
        x-omitempty: false
      isPageReadonly:
        type: boolean
        description: Whether the page is readonly (no new comments are allowed)
        x-omitempty: false
      authAnonymous:
        type: boolean
        description: Whether anonymous comments are allowed
        x-omitempty: false
      authLocal:
        type: boolean
        description: Whether local authentication is allowed
        x-omitempty: false
      authSso:
        type: boolean
        description: Whether SSO authentication is allowed
        x-omitempty: false
      ssoUrl:
        type: string
        description: SSO provider URL
      defaultSort:
        $ref: "#/definitions/commentSort"
        description: Default comment sorting for domain
      idps:
        type: array
        items:
          $ref: "#/definitions/federatedIdpId"
        description: List of IDs of enabled federated identity providers

  path:
    description: Path on a certain host
    example: /foo
    type: string
    minLength: 1
    maxLength: 2075 # 2083 (max URL length) - 8 (http://a, the shortest possible prefix)
    pattern: "/.*"
    x-isnullable: false

  principal:
    description: Authenticated or anonymous user
    type: object
    readOnly: true
    properties:
      id:
        type: string
        format: uuid
        description: Unique user ID
      email:
        type: string
        format: email
        description: Email address of the user
      name:
        type: string
        description: Full name of the user
      websiteUrl:
        type: string
        format: uri
        description: Optional website URL of the user
      hasAvatar:
        type: boolean
        description: Whether the user has an avatar image
        x-omitempty: false
      isLocal:
        type: boolean
        description: Whether the user is authenticated locally (as opposed to via a federated identity provider)
        x-omitempty: false
      isConfirmed:
        type: boolean
        description: Whether the user has confirmed their email address
        x-omitempty: false
      isSuperuser:
        type: boolean
        description: Whether the user is a "super user" (instance admin)
        x-omitempty: false
      isOwner:
        type: boolean
        description: Whether the user is an owner of the domain (only for commenter auth)
        x-omitempty: false
      isModerator:
        type: boolean
        description: Whether the user is a moderator on this specific domain (only for commenter auth)
        x-omitempty: false
      isCommenter:
        type: boolean
        description: Whether the user is a commenter on this specific domain (false means the user is read-only; only for commenter auth)
        x-omitempty: false
      notifyReplies:
        type: boolean
        description: Whether the user is to be notified about replies to their comments (only for commenter auth)
        x-omitempty: false
      notifyModerator:
        type: boolean
        description: Whether the user is to receive moderator notifications (only for commenter auth)
        x-omitempty: false

parameters:

  federatedIdpId:
    in: path
    name: provider
    required: true
    description: Federated identity provider ID
    type: string
    enum:
      - github
      - gitlab
      - google
      - twitter
      - sso  # SSO is a special case of federated authentication, which requires additional configuration for a specific domain

  pathImportSource:
    name: source
    in: path
    required: true
    description: Source of the data to import into a domain
    type: string
    enum:
      - commento
      - disqus

  pathHost:
    name: host
    in: path
    required: true
    description: Domain host path parameter
    type: string
    minLength: 1
    maxLength: 259
    pattern: "[-.a-z0-9]{1,253}(:[0-9]{1-5})?"

  pathUuid:
    in: path
    name: uuid
    required: true
    description: UUID in the path
    type: string
    format: uuid
    x-isnullable: false

  queryFilter:
    name: filter
    in: query
    required: false
    description: Optional substring to filter the result by
    type: string
    maxLength: 100

  queryHost:
    name: host
    in: query
    required: true
    description: Domain host query parameter
    type: string
    minLength: 1
    maxLength: 259
    pattern: "[-.a-z0-9]{1,253}(:[0-9]{1-5})?"

  queryPageNumber:
    name: page
    in: query
    required: false
    description: Optional page number to return results for
    type: integer
    minimum: 1
    default: 1

  queryToken:
    in: query
    name: token
    required: true
    description: ID consisting of 64 hex digits, in the query parameter
    type: string
    minLength: 64
    maxLength: 64
    pattern: '[0-9a-f]{64}'

  queryStatsDays:
    in: query
    name: days
    required: false
    type: integer
    format: uint
    minimum: 1
    maximum: 30
    default: 30
    description: Number of days to get statistics for

responses:
  # 400
  BadRequest:
    description: Invalid input data has been passed
    schema:
      $ref: "#/definitions/apiError"

  # 401
  Unauthorised:
    description: User is not authorised
    schema:
      $ref: "#/definitions/apiError"

  # 403
  Forbidden:
    description: The specified operation is not allowed
    schema:
      $ref: "#/definitions/apiError"

  # 404
  NotFound:
    description: The specified resource was not found
    schema:
      $ref: "#/definitions/apiError"

  # 422
  UnprocessableEntity:
    description: Invalid input data has been passed
    schema:
      $ref: "#/definitions/apiError"

  # 500
  InternalError:
    description: Server experiences an internal error
    schema:
      $ref: "#/definitions/apiError"

  # 307
  OAuthRedirect:
    description: Redirecting to a federated identity provider
    headers:
      Location:
        type: string

  # 401
  OAuthFailure:
    description: Authentication failed
    schema:
      type: string

paths:
  /_:
    options:
      operationId: Generic
      summary: Fake endpoint to provide generic errors
      tags:
        - ApiGeneral
      responses:
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorised"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        422:
          $ref: "#/responses/UnprocessableEntity"
        500:
          $ref: "#/responses/InternalError"

  #---------------------------------------------------------------------------------------------------------------------
  # Generic stuff
  #---------------------------------------------------------------------------------------------------------------------

  /config:
    get:
      operationId: ComentarioConfig
      summary: Obtain Comentario configuration
      tags:
        - ApiGeneral
      security: []
      responses:
        200:
          description: Comentario configuration
          schema:
            $ref: "#/definitions/comentarioConfig"

  #---------------------------------------------------------------------------------------------------------------------
  # Auth
  #---------------------------------------------------------------------------------------------------------------------

  /auth/confirm:
    get:
      operationId: AuthConfirm
      summary: Confirm the user's email using the provided token
      tags:
        - ApiGeneral
      security:
        - token: [confirm-email]
      responses:
        307:
          description: Email has been confirmed, redirecting to the signup URL, if any, otherwise to login
          headers:
            Location:
              type: string

  /auth/login:
    post:
      operationId: AuthLogin
      summary: Sign in as an existing user
      tags:
        - ApiGeneral
      security: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                minLength: 1
                maxLength: 63
      responses:
        200:
          description: Login successful
          schema:
            $ref: "#/definitions/principal"

  /auth/login/token:
    post:
      operationId: AuthLoginTokenNew
      summary: Request a new anonymous token with the "login" scope, which is to be used for subsequent federated authentication
      tags:
        - ApiGeneral
      security: []
      responses:
        200:
          description: New anonymous token is returned
          schema:
            type: object
            properties:
              token:
                type: string
                description: New anonymous token

    put:
      operationId: AuthLoginTokenRedeem
      summary: Log in using the provided, no longer anonymous, token
      tags:
        - ApiGeneral
      security:
        - token: [login]
      responses:
        200:
          description: Login successful
          schema:
            $ref: "#/definitions/principal"

  /auth/logout:
    post:
      operationId: AuthLogout
      summary: Log the current user out
      tags:
        - ApiGeneral
      responses:
        204:
          description: User has been logged out

  /auth/profile:
    post:
      operationId: AuthSignup
      summary: Sign up as a new owner
      tags:
        - ApiGeneral
      security: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - name
              - email
              - password
            properties:
              name:
                type: string
                minLength: 1
                maxLength: 63
              email:
                type: string
                format: email
              password:
                type: string
                minLength: 1
                maxLength: 63
      responses:
        200:
          description: Owner has signed up successfully, returning a principal
          schema:
            $ref: "#/definitions/principal"

    delete:
      operationId: AuthDeleteProfile
      summary: Delete the account of the current user
      tags:
        - ApiGeneral
      responses:
        204:
          description: Owner's account has been deleted

  /auth/password-reset:
    post:
      operationId: AuthPwdResetSendEmail
      summary: Request a password reset for a local user by sending them an email
      tags:
        - ApiGeneral
      security: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                format: email
      responses:
        204:
          description: Reset email has been sent, if the email address is known

    put:
      operationId: AuthPwdResetChange
      summary: Give a local user a new password
      tags:
        - ApiGeneral
      security:
        - token: [pwd-reset]
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - password
            properties:
              password:
                type: string
                description: New password to set
                minLength: 1
                maxLength: 63
      responses:
        204:
          description: Password has been reset

  # OAuth

  /oauth/{provider}:
    get:
      operationId: AuthOauthInit
      summary: Initiate signing in via federated authentication using an anonymous token
      tags:
        - ApiGeneral
      security: []
      produces:
        - text/html # For an error response only, otherwise a redirect is issued
      parameters:
        - $ref: "#/parameters/federatedIdpId"
        - $ref: "#/parameters/queryHost"
        - $ref: "#/parameters/queryToken"
      responses:
        307:
          $ref: "#/responses/OAuthRedirect"
        401:
          $ref: "#/responses/OAuthFailure"

  /oauth/{provider}/callback:
    get:
      operationId: AuthOauthCallback
      summary: Endpoint that gets called back by the federated authentication provider
      tags:
        - ApiGeneral
      security: []
      produces:
        - text/html
      parameters:
        - $ref: "#/parameters/federatedIdpId"
      responses:
        200:
          description: User has successfully signed in
        401:
          $ref: "#/responses/OAuthFailure"

  #---------------------------------------------------------------------------------------------------------------------
  # Current user
  #---------------------------------------------------------------------------------------------------------------------

  /user:
    get:
      operationId: CurUserGet
      summary: Fetch the currently authenticated user, if any
      tags:
        - ApiGeneral
      security: []
      responses:
        200:
          description: User is authenticated, principal info returned
          schema:
            $ref: "#/definitions/principal"
        204:
          description: User is not authenticated

    put:
      operationId: CurUserUpdate
      summary: Update profile details of the current user
      tags:
        - ApiGeneral
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                minLength: 1
                maxLength: 63
                description: New full name of the user
              curPassword:
                type: string
                minLength: 1
                maxLength: 63
                description: Current password of the user. Required if newPassword is given, otherwise ignored
              newPassword:
                type: string
                minLength: 1
                maxLength: 63
                description: New password to set for the user. Optional, if not provided, the password remains unchanged
      responses:
        204:
          description: User profile has been updated

  #---------------------------------------------------------------------------------------------------------------------
  # Users
  #---------------------------------------------------------------------------------------------------------------------

  /users/{uuid}/avatar:
    get:
      operationId: UsersAvatarGet
      summary: Get an avatar for given user in JPEG format
      tags:
        - ApiGeneral
      security: []
      produces:
        - image/jpeg
      parameters:
        - $ref: "#/parameters/pathUuid"
      responses:
        200:
          description: User avatar in the JPEG format
          schema:
            type: file
        204:
          description: User has no avatar

  #---------------------------------------------------------------------------------------------------------------------
  # Embed API
  #---------------------------------------------------------------------------------------------------------------------

  # Auth

  /embed/auth/login:
    post:
      operationId: EmbedAuthLogin
      summary: Sign a commenter in
      tags:
        - ApiEmbed
      security: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
              - password
              - host
            properties:
              email:
                type: string
                format: email
                description: Commenter's email
              password:
                type: string
                minLength: 1
                description: Commenter's password
              host:
                $ref: "#/definitions/host"
                description: Host the commenter is signing in on
      responses:
        200:
          description: Logged in successfully
          schema:
            type: object
            properties:
              sessionToken:
                type: string
                description: Session token to authenticate subsequent API requests with
              principal:
                $ref: "#/definitions/principal"
                description: Authenticated principal

  /embed/auth/login/token:
    put:
      operationId: EmbedAuthLoginTokenRedeem
      summary: Log in using the provided, no longer anonymous, token
      tags:
        - ApiEmbed
      security:
        - token: [login]
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - host
            properties:
              host:
                $ref: "#/definitions/host"
                description: Host the commenter is signing in on
      responses:
        200:
          description: Logged in successfully
          schema:
            type: object
            properties:
              sessionToken:
                type: string
                description: Session token to authenticate subsequent API requests with
              principal:
                $ref: "#/definitions/principal"
                description: Authenticated principal

  /embed/auth/logout:
    post:
      operationId: EmbedAuthLogout
      summary: Log the currently signed-in commenter out
      tags:
        - ApiEmbed
      security:
        - userSessionHeader: []
      responses:
        204:
          description: Logged out successfully

  /embed/auth/signup:
    post:
      operationId: EmbedAuthSignup
      summary: Sign up as a new commenter
      tags:
        - ApiEmbed
      security: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
              - name
              - password
              - url
            properties:
              email:
                type: string
                format: email
                description: User's email
              name:
                type: string
                minLength: 1
                maxLength: 63
                description: User's full name
              password:
                type: string
                minLength: 1
                maxLength: 63
                description: User's password
              websiteUrl:
                type: string
                format: uri
                description: Optional website URL of the user
              url:
                type: string
                format: uri
                description: URL the user signed up on
      responses:
        200:
          description: Commenter signed up successfully
          schema:
            type: object
            properties:
              isConfirmed:
                type: boolean
                description: Whether the user has been immediately confirmed
                x-omitempty: false
  /embed/auth/user:
    post:
      operationId: EmbedAuthCurUserGet
      summary: Request commenter's sign-in status and, if the commenter's signed in, their details
      tags:
        - ApiEmbed
      security: []
      responses:
        204:
          description: User is not signed in
        200:
          description: User is authenticated, principal info returned
          schema:
            $ref: "#/definitions/principal"

    put:
      operationId: EmbedAuthCurUserUpdate
      summary: Update commenter details
      tags:
        - ApiEmbed
      security:
        - userSessionHeader: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - pageId
            properties:
              pageId:
                type: string
                format: uuid
                description: ID of the page to apply user notification settings on
              notifyReplies:
                type: boolean
                description: Whether the user is to be notified about replies to their comments
              notifyModerator:
                type: boolean
                description: Whether the user is to receive moderator notifications
      responses:
        204:
          description: Commenter details haven been updated

  # Comments

  /embed/comments:
    post:
      operationId: EmbedCommentList
      summary: Get a list of comments and commenters for the given host/path combination
      tags:
        - ApiEmbed
      security:
        - userSessionHeader: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - host
              - path
            properties:
              host:
                $ref: "#/definitions/host"
                description: Host the comments reside on
              path:
                $ref: "#/definitions/path"
                description: Path of the page the comments reside on
      responses:
        200:
          description: Comment and commenter list
          schema:
            type: object
            properties:
              pageInfo:
                description: Page info
                $ref: "#/definitions/pageInfo"
              comments:
                description: Comments on the page
                type: array
                items:
                  $ref: "#/definitions/comment"
              commenters:
                description: Commenters, who authored comments on the page
                type: array
                items:
                  $ref: "#/definitions/commenter"

    put:
      operationId: EmbedCommentNew
      summary: Add a new comment
      tags:
        - ApiEmbed
      security:
        - userSessionHeader: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - host
              - path
              - markdown
            properties:
              host:
                description: Host the page resides on
                $ref: "#/definitions/host"
              path:
                description: Path to the page to create a comment on
                $ref: "#/definitions/path"
              parentId:
                description: Optional ID of the parent comment for the new one. If omitted, a root comment will be added
                type: string
                format: uuid
              markdown:
                description: Comment text in the markdown format
                type: string
                minLength: 1
                maxLength: 4096
                x-isnullable: false
      responses:
        200:
          description: Comment is added
          schema:
            type: object
            properties:
              comment:
                description: Added comment
                $ref: "#/definitions/comment"
              commenter:
                description: Commenter that corresponds to the current user
                $ref: "#/definitions/commenter"

  /embed/comments/counts:
    post:
      operationId: EmbedCommentCount
      summary: Request comment counts for specified paths on given domain
      tags:
        - ApiEmbed
      security: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - host
              - paths
            properties:
              host:
                $ref: "#/definitions/host"
              paths:
                type: array
                items:
                  $ref: "#/definitions/path"
                minItems: 1
                maxItems: 32
      responses:
        200:
          description: Comment counts per path
          schema:
            type: object
            properties:
              commentCounts:
                type: object # map[string]int

  /embed/comments/{uuid}:
    parameters:
      - $ref: "#/parameters/pathUuid"

    delete:
      operationId: EmbedCommentDelete
      summary: Delete specified comment
      tags:
        - ApiEmbed
      security:
        - userSessionHeader: []
      responses:
        204:
          description: Comment has been deleted

    put:
      operationId: EmbedCommentUpdate
      summary: Update specified comment
      tags:
        - ApiEmbed
      security:
        - userSessionHeader: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - markdown
            properties:
              markdown:
                description: Comment text in the markdown format
                type: string
                minLength: 1
                maxLength: 4096
                x-isnullable: false
      responses:
        200:
          description: Comment is updated, the updated comment is returned
          schema:
            type: object
            properties:
              comment:
                description: >
                  Updated comment. NB: Vote direction in the returned comment is always 0
                $ref: "#/definitions/comment"

  /embed/comments/{uuid}/sticky:
    post:
      operationId: EmbedCommentSticky
      summary: Set the stickiness for specified comment
      tags:
        - ApiEmbed
      security:
        - userSessionHeader: []
      parameters:
        - $ref: "#/parameters/pathUuid"
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - sticky
            properties:
              sticky:
                type: boolean
                description: New sticky value for the comment
      responses:
        204:
          description: Stickiness has been applied

  /embed/comments/{uuid}/vote:
    post:
      operationId: EmbedCommentVote
      summary: Vote for specified comment
      tags:
        - ApiEmbed
      security:
        - userSessionHeader: []
      parameters:
        - $ref: "#/parameters/pathUuid"
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - direction
            properties:
              direction:
                type: integer
                format: int8
                enum:
                  - -1
                  - 0
                  - 1
                description: Vote direction
      responses:
        200:
          description: Vote has been applied
          schema:
            type: object
            properties:
              score:
                type: integer
                description: The updated comment score
                x-omitempty: false

  /embed/comments/{uuid}/moderate:
    # TODO new-db this must probably redirect to the UI
    post:
      operationId: EmbedCommentModerate
      summary: Moderate specified unapproved comment
      tags:
        - ApiEmbed
      security:
        - userSessionHeader: []
      parameters:
        - $ref: "#/parameters/pathUuid"
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - approve
            properties:
              approve:
                description: Whether to approve the comment
                type: boolean
      responses:
        204:
          description: Comment has been approved

  /embed/page/{uuid}:
    put:
      operationId: EmbedPageUpdate
      summary: Update specified page's properties
      tags:
        - ApiEmbed
      security:
        - userSessionHeader: []
      parameters:
        - $ref: "#/parameters/pathUuid"
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - isReadonly
            properties:
              isReadonly:
                type: boolean
                description: Whether the page is to be made readonly (no new comments are allowed)

      responses:
        204:
          description: Page properties have been updated

  #---------------------------------------------------------------------------------------------------------------------
  # Dashboard
  #---------------------------------------------------------------------------------------------------------------------

  /dashboard/stats/totals:
    get:
      operationId: DashboardTotals
      summary: Get summary (totals) data for the user
      tags:
        - ApiGeneral
      responses:
        200:
          description: Dashboard data
          schema:
            type: object
            required:
              - countDomains
              - countPages
              - countComments
              - countCommenters
            properties:
              countDomains:
                description: Total number of domains belonging to the user
                type: integer
                format: uint
                x-omitempty: false
                x-isnullable: false
              countPages:
                description: Total number of pages with comments on the user's domains
                type: integer
                format: uint
                x-omitempty: false
                x-isnullable: false
              countComments:
                description: Total number of comments on the user's domains
                type: integer
                format: uint
                x-omitempty: false
                x-isnullable: false
              countCommenters:
                description: Total number of commenters, who left comments on the user's domains
                type: integer
                format: uint
                x-omitempty: false
                x-isnullable: false

  /dashboard/stats/daily:
    get:
      operationId: DashboardDailyStats
      summary: Get daily comment and view statistics for the user
      tags:
        - ApiGeneral
      parameters:
        - $ref: "#/parameters/queryStatsDays"
      responses:
        200:
          description: Statistical data on comments and views for the current user
          schema:
            $ref: "#/definitions/dailyViewCommentStats"

  #---------------------------------------------------------------------------------------------------------------------
  # Domains
  #---------------------------------------------------------------------------------------------------------------------

  /domains:
    get:
      operationId: DomainList
      summary: Get a list of registered domains
      tags:
        - ApiGeneral
      parameters:
        - $ref: "#/parameters/queryFilter"
        - $ref: "#/parameters/queryPageNumber"
      responses:
        200:
          description: List of domains
          schema:
            type: object
            properties:
              domains:
                type: array
                items:
                  $ref: "#/definitions/domain"

    post:
      operationId: DomainNew
      summary: Register a new domain
      tags:
        - ApiGeneral
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - domain
            properties:
              domain:
                $ref: "#/definitions/domain"
                description: Domain properties
              federatedIdpIds:
                type: array
                items:
                  $ref: "#/definitions/federatedIdpId"
                description: IDs of federated identity providers enabled for the domain
      responses:
        200:
          description: Domain added successfully
          schema:
            $ref: "#/definitions/domain"
            description: The added domain

  /domains/{uuid}:
    parameters:
      - $ref: "#/parameters/pathUuid"

    get:
      operationId: DomainGet
      summary: Get properties of a domain
      tags:
        - ApiGeneral
      responses:
        200:
          description: Domain properties
          schema:
            type: object
            properties:
              domain:
                $ref: "#/definitions/domain"
                description: Domain properties
              federatedIdpIds:
                type: array
                items:
                  $ref: "#/definitions/federatedIdpId"
                description: IDs of federated identity providers enabled for the domain

    put:
      operationId: DomainUpdate
      summary: Update properties of specified domain
      tags:
        - ApiGeneral
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - domain
            properties:
              domain:
                $ref: "#/definitions/domain"
                description: Domain properties
              federatedIdpIds:
                type: array
                items:
                  $ref: "#/definitions/federatedIdpId"
                description: IDs of federated identity providers enabled for the domain
      responses:
        200:
          description: Domain properties have been updated
          schema:
            $ref: "#/definitions/domain"
            description: The updated domain

    delete:
      operationId: DomainDelete
      summary: Delete a domain
      tags:
        - ApiGeneral
      responses:
        204:
          description: Domain has been deleted

  /domains/{uuid}/clear:
    delete:
      operationId: DomainClear
      summary: Clear all domain's pages/comments/votes
      tags:
        - ApiGeneral
      parameters:
        - $ref: "#/parameters/pathUuid"
      responses:
        204:
          description: Domain has been cleared

  /domains/{uuid}/readonly:
    put:
      operationId: DomainReadonly
      summary: Set the domain's readonly state
      tags:
        - ApiGeneral
      parameters:
        - $ref: "#/parameters/pathUuid"
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - readonly
            properties:
              readonly:
                type: boolean
                description: Readonly status to set
      responses:
        204:
          description: Domain status has been set

  /domains/{uuid}/export:
    get:
      operationId: DomainExport
      summary: Export domain data and download as a gzip-archive file
      tags:
        - ApiGeneral
      produces:
        - application/gzip
      parameters:
        - $ref: "#/parameters/pathUuid"
      responses:
        200:
          description: Export file
          schema:
            type: file
          headers:
            Content-Disposition:
              type: string

  /domains/{uuid}/import/{source}:
    post:
      operationId: DomainImport
      summary: Import comments and commenters into specified domain from exported data, downloaded from certain URL
      tags:
        - ApiGeneral
      consumes:
        - multipart/form-data
      parameters:
        - $ref: "#/parameters/pathUuid"
        - $ref: "#/parameters/pathImportSource"
        - in: formData
          name: data
          type: file
          required: true
          description: Import data file
      responses:
        200:
          description: Import completed successfully
          schema:
            type: object
            properties:
              numImported:
                type: integer
                format: uint
                description: Number of imported comments
                x-omitempty: false

  /domains/{uuid}/sso/new:
    post:
      operationId: DomainSsoSecretNew
      summary: Generate an SSO secret for specified domain
      tags:
        - ApiGeneral
      parameters:
        - $ref: "#/parameters/pathUuid"
      responses:
        200:
          description: SSO secret has been generated for the domain
          schema:
            type: object
            properties:
              ssoSecret:
                type: string

  /domains/{uuid}/stats:
    get:
      operationId: DomainDailyStats
      summary: Get comment and view statistics for specified domain
      tags:
        - ApiGeneral
      parameters:
        - $ref: "#/parameters/pathUuid"
        - $ref: "#/parameters/queryStatsDays"
      responses:
        200:
          description: Statistical data on comments and views for the domain
          schema:
            $ref: "#/definitions/dailyViewCommentStats"

  #---------------------------------------------------------------------------------------------------------------------
  # Testing endpoints
  # These endpoints are only available during the test cycle and never in production
  #---------------------------------------------------------------------------------------------------------------------

  /e2e/reset:
    post:
      operationId: E2eReset
      summary: Reset the backend (all settings and database) to testing defaults
      tags:
        - ApiE2e
      security: []
      responses:
        204:
          description: The backend has been successfully reset
